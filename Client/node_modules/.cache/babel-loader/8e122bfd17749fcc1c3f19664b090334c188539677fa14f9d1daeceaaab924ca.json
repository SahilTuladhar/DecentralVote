{"ast":null,"code":"// pull in 'today' data for the baseline moment\nconst getNow = function (s) {\n  s.epoch = Date.now();\n  Object.keys(s._today || {}).forEach(k => {\n    if (typeof s[k] === 'function') {\n      s = s[k](s._today[k]);\n    }\n  });\n  return s;\n};\nconst dates = {\n  now: s => {\n    return getNow(s);\n  },\n  today: s => {\n    return getNow(s);\n  },\n  tonight: s => {\n    s = getNow(s);\n    s = s.hour(18); //6pm\n    return s;\n  },\n  tomorrow: s => {\n    s = getNow(s);\n    s = s.add(1, 'day');\n    s = s.startOf('day');\n    return s;\n  },\n  yesterday: s => {\n    s = getNow(s);\n    s = s.subtract(1, 'day');\n    s = s.startOf('day');\n    return s;\n  },\n  christmas: s => {\n    let year = getNow(s).year();\n    s = s.set([year, 11, 25, 18, 0, 0]); // Dec 25\n    return s;\n  },\n  'new years': s => {\n    let year = getNow(s).year();\n    s = s.set([year, 11, 31, 18, 0, 0]); // Dec 31\n    return s;\n  }\n};\ndates['new years eve'] = dates['new years'];\nexport default dates;","map":{"version":3,"names":["getNow","s","epoch","Date","now","Object","keys","_today","forEach","k","dates","today","tonight","hour","tomorrow","add","startOf","yesterday","subtract","christmas","year","set"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/node_modules/spacetime/src/input/named-dates.js"],"sourcesContent":["// pull in 'today' data for the baseline moment\nconst getNow = function (s) {\n  s.epoch = Date.now()\n  Object.keys(s._today || {}).forEach((k) => {\n    if (typeof s[k] === 'function') {\n      s = s[k](s._today[k])\n    }\n  })\n  return s\n}\n\nconst dates = {\n  now: (s) => {\n    return getNow(s)\n  },\n  today: (s) => {\n    return getNow(s)\n  },\n  tonight: (s) => {\n    s = getNow(s)\n    s = s.hour(18) //6pm\n    return s\n  },\n  tomorrow: (s) => {\n    s = getNow(s)\n    s = s.add(1, 'day')\n    s = s.startOf('day')\n    return s\n  },\n  yesterday: (s) => {\n    s = getNow(s)\n    s = s.subtract(1, 'day')\n    s = s.startOf('day')\n    return s\n  },\n  christmas: (s) => {\n    let year = getNow(s).year()\n    s = s.set([year, 11, 25, 18, 0, 0]) // Dec 25\n    return s\n  },\n  'new years': (s) => {\n    let year = getNow(s).year()\n    s = s.set([year, 11, 31, 18, 0, 0]) // Dec 31\n    return s\n  }\n}\ndates['new years eve'] = dates['new years']\nexport default dates\n"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAG,SAAAA,CAAUC,CAAC,EAAE;EAC1BA,CAAC,CAACC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EACpBC,MAAM,CAACC,IAAI,CAACL,CAAC,CAACM,MAAM,IAAI,CAAC,CAAC,CAAC,CAACC,OAAO,CAAEC,CAAC,IAAK;IACzC,IAAI,OAAOR,CAAC,CAACQ,CAAC,CAAC,KAAK,UAAU,EAAE;MAC9BR,CAAC,GAAGA,CAAC,CAACQ,CAAC,CAAC,CAACR,CAAC,CAACM,MAAM,CAACE,CAAC,CAAC,CAAC;IACvB;EACF,CAAC,CAAC;EACF,OAAOR,CAAC;AACV,CAAC;AAED,MAAMS,KAAK,GAAG;EACZN,GAAG,EAAGH,CAAC,IAAK;IACV,OAAOD,MAAM,CAACC,CAAC,CAAC;EAClB,CAAC;EACDU,KAAK,EAAGV,CAAC,IAAK;IACZ,OAAOD,MAAM,CAACC,CAAC,CAAC;EAClB,CAAC;EACDW,OAAO,EAAGX,CAAC,IAAK;IACdA,CAAC,GAAGD,MAAM,CAACC,CAAC,CAAC;IACbA,CAAC,GAAGA,CAAC,CAACY,IAAI,CAAC,EAAE,CAAC,EAAC;IACf,OAAOZ,CAAC;EACV,CAAC;EACDa,QAAQ,EAAGb,CAAC,IAAK;IACfA,CAAC,GAAGD,MAAM,CAACC,CAAC,CAAC;IACbA,CAAC,GAAGA,CAAC,CAACc,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;IACnBd,CAAC,GAAGA,CAAC,CAACe,OAAO,CAAC,KAAK,CAAC;IACpB,OAAOf,CAAC;EACV,CAAC;EACDgB,SAAS,EAAGhB,CAAC,IAAK;IAChBA,CAAC,GAAGD,MAAM,CAACC,CAAC,CAAC;IACbA,CAAC,GAAGA,CAAC,CAACiB,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC;IACxBjB,CAAC,GAAGA,CAAC,CAACe,OAAO,CAAC,KAAK,CAAC;IACpB,OAAOf,CAAC;EACV,CAAC;EACDkB,SAAS,EAAGlB,CAAC,IAAK;IAChB,IAAImB,IAAI,GAAGpB,MAAM,CAACC,CAAC,CAAC,CAACmB,IAAI,CAAC,CAAC;IAC3BnB,CAAC,GAAGA,CAAC,CAACoB,GAAG,CAAC,CAACD,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IACpC,OAAOnB,CAAC;EACV,CAAC;EACD,WAAW,EAAGA,CAAC,IAAK;IAClB,IAAImB,IAAI,GAAGpB,MAAM,CAACC,CAAC,CAAC,CAACmB,IAAI,CAAC,CAAC;IAC3BnB,CAAC,GAAGA,CAAC,CAACoB,GAAG,CAAC,CAACD,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IACpC,OAAOnB,CAAC;EACV;AACF,CAAC;AACDS,KAAK,CAAC,eAAe,CAAC,GAAGA,KAAK,CAAC,WAAW,CAAC;AAC3C,eAAeA,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}