{"ast":null,"code":"//make a string, for easy comparison between dates\nconst print = {\n  millisecond: s => {\n    return s.epoch;\n  },\n  second: s => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute(), s.second()].join('-');\n  },\n  minute: s => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute()].join('-');\n  },\n  hour: s => {\n    return [s.year(), s.month(), s.date(), s.hour()].join('-');\n  },\n  day: s => {\n    return [s.year(), s.month(), s.date()].join('-');\n  },\n  week: s => {\n    return [s.year(), s.week()].join('-');\n  },\n  month: s => {\n    return [s.year(), s.month()].join('-');\n  },\n  quarter: s => {\n    return [s.year(), s.quarter()].join('-');\n  },\n  year: s => {\n    return s.year();\n  }\n};\nprint.date = print.day;\nconst addMethods = SpaceTime => {\n  SpaceTime.prototype.isSame = function (b, unit, tzAware = true) {\n    let a = this;\n    if (!unit) {\n      return null;\n    }\n    // support swapped params\n    if (typeof b === 'string' && typeof unit === 'object') {\n      let tmp = b;\n      b = unit;\n      unit = tmp;\n    }\n    if (typeof b === 'string' || typeof b === 'number') {\n      b = new SpaceTime(b, this.timezone.name);\n    }\n    //support 'seconds' aswell as 'second'\n    unit = unit.replace(/s$/, '');\n\n    // make them the same timezone for proper comparison\n    if (tzAware === true && a.tz !== b.tz) {\n      b = b.clone();\n      b.tz = a.tz;\n    }\n    if (print[unit]) {\n      return print[unit](a) === print[unit](b);\n    }\n    return null;\n  };\n};\nexport default addMethods;","map":{"version":3,"names":["print","millisecond","s","epoch","second","year","month","date","hour","minute","join","day","week","quarter","addMethods","SpaceTime","prototype","isSame","b","unit","tzAware","a","tmp","timezone","name","replace","tz","clone"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/node_modules/spacetime/src/methods/same.js"],"sourcesContent":["//make a string, for easy comparison between dates\nconst print = {\n  millisecond: (s) => {\n    return s.epoch\n  },\n  second: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute(), s.second()].join('-')\n  },\n  minute: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute()].join('-')\n  },\n  hour: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour()].join('-')\n  },\n  day: (s) => {\n    return [s.year(), s.month(), s.date()].join('-')\n  },\n  week: (s) => {\n    return [s.year(), s.week()].join('-')\n  },\n  month: (s) => {\n    return [s.year(), s.month()].join('-')\n  },\n  quarter: (s) => {\n    return [s.year(), s.quarter()].join('-')\n  },\n  year: (s) => {\n    return s.year()\n  }\n}\nprint.date = print.day\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.isSame = function (b, unit, tzAware = true) {\n    let a = this\n    if (!unit) {\n      return null\n    }\n    // support swapped params\n    if (typeof b === 'string' && typeof unit === 'object') {\n      let tmp = b\n      b = unit\n      unit = tmp\n    }\n    if (typeof b === 'string' || typeof b === 'number') {\n      b = new SpaceTime(b, this.timezone.name)\n    }\n    //support 'seconds' aswell as 'second'\n    unit = unit.replace(/s$/, '')\n\n    // make them the same timezone for proper comparison\n    if (tzAware === true && a.tz !== b.tz) {\n      b = b.clone()\n      b.tz = a.tz\n    }\n    if (print[unit]) {\n      return print[unit](a) === print[unit](b)\n    }\n    return null\n  }\n}\n\nexport default addMethods\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}