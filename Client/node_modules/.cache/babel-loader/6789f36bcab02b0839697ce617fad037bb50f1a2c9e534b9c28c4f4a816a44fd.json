{"ast":null,"code":"//our conceptual 'break-points' for each unit\nconst qualifiers = {\n  months: {\n    almost: 10,\n    over: 4\n  },\n  days: {\n    almost: 25,\n    over: 10\n  },\n  hours: {\n    almost: 20,\n    over: 8\n  },\n  minutes: {\n    almost: 50,\n    over: 20\n  },\n  seconds: {\n    almost: 50,\n    over: 20\n  }\n};\n\n// Expects a plural unit arg\nfunction pluralize(value, unit) {\n  if (value === 1) {\n    unit = unit.slice(0, -1);\n  }\n  return value + ' ' + unit;\n}\nconst toSoft = function (diff) {\n  let rounded = null;\n  let qualified = null;\n  let abbreviated = [];\n  let englishValues = [];\n  //go through each value and create its text-representation\n  Object.keys(diff).forEach((unit, i, units) => {\n    const value = Math.abs(diff[unit]);\n    if (value === 0) {\n      return;\n    }\n    abbreviated.push(value + unit[0]);\n    const englishValue = pluralize(value, unit);\n    englishValues.push(englishValue);\n    if (!rounded) {\n      rounded = qualified = englishValue;\n      if (i > 4) {\n        return;\n      }\n      //is it a 'almost' something, etc?\n      const nextUnit = units[i + 1];\n      const nextValue = Math.abs(diff[nextUnit]);\n      if (nextValue > qualifiers[nextUnit].almost) {\n        rounded = pluralize(value + 1, unit);\n        qualified = 'almost ' + rounded;\n      } else if (nextValue > qualifiers[nextUnit].over) {\n        qualified = 'over ' + englishValue;\n      }\n    }\n  });\n  return {\n    qualified,\n    rounded,\n    abbreviated,\n    englishValues\n  };\n};\nexport default toSoft;","map":{"version":3,"names":["qualifiers","months","almost","over","days","hours","minutes","seconds","pluralize","value","unit","slice","toSoft","diff","rounded","qualified","abbreviated","englishValues","Object","keys","forEach","i","units","Math","abs","push","englishValue","nextUnit","nextValue"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/methods/since/soften.js"],"sourcesContent":["//our conceptual 'break-points' for each unit\nconst qualifiers = {\n  months: {\n    almost: 10,\n    over: 4\n  },\n  days: {\n    almost: 25,\n    over: 10\n  },\n  hours: {\n    almost: 20,\n    over: 8\n  },\n  minutes: {\n    almost: 50,\n    over: 20\n  },\n  seconds: {\n    almost: 50,\n    over: 20\n  }\n}\n\n// Expects a plural unit arg\nfunction pluralize(value, unit) {\n  if (value === 1) {\n    unit = unit.slice(0, -1)\n  }\n  return value + ' ' + unit\n}\n\nconst toSoft = function (diff) {\n  let rounded = null\n  let qualified = null\n  let abbreviated = []\n  let englishValues = []\n  //go through each value and create its text-representation\n  Object.keys(diff).forEach((unit, i, units) => {\n    const value = Math.abs(diff[unit])\n    if (value === 0) {\n      return\n    }\n    abbreviated.push(value + unit[0])\n    const englishValue = pluralize(value, unit)\n    englishValues.push(englishValue)\n    if (!rounded) {\n      rounded = qualified = englishValue\n      if (i > 4) {\n        return\n      }\n      //is it a 'almost' something, etc?\n      const nextUnit = units[i + 1]\n      const nextValue = Math.abs(diff[nextUnit])\n      if (nextValue > qualifiers[nextUnit].almost) {\n        rounded = pluralize(value + 1, unit)\n        qualified = 'almost ' + rounded\n      } else if (nextValue > qualifiers[nextUnit].over) {\n        qualified = 'over ' + englishValue\n      }\n    }\n  })\n  return { qualified, rounded, abbreviated, englishValues }\n}\nexport default toSoft"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG;EACjBC,MAAM,EAAE;IACNC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;EACR,CAAC;EACDC,IAAI,EAAE;IACJF,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;EACR,CAAC;EACDE,KAAK,EAAE;IACLH,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;EACR,CAAC;EACDG,OAAO,EAAE;IACPJ,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;EACR,CAAC;EACDI,OAAO,EAAE;IACPL,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;EACR;AACF,CAAC;;AAED;AACA,SAASK,SAASA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC9B,IAAID,KAAK,KAAK,CAAC,EAAE;IACfC,IAAI,GAAGA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B;EACA,OAAOF,KAAK,GAAG,GAAG,GAAGC,IAAI;AAC3B;AAEA,MAAME,MAAM,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC7B,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIC,SAAS,GAAG,IAAI;EACpB,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,aAAa,GAAG,EAAE;EACtB;EACAC,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACO,OAAO,CAAC,CAACV,IAAI,EAAEW,CAAC,EAAEC,KAAK,KAAK;IAC5C,MAAMb,KAAK,GAAGc,IAAI,CAACC,GAAG,CAACX,IAAI,CAACH,IAAI,CAAC,CAAC;IAClC,IAAID,KAAK,KAAK,CAAC,EAAE;MACf;IACF;IACAO,WAAW,CAACS,IAAI,CAAChB,KAAK,GAAGC,IAAI,CAAC,CAAC,CAAC,CAAC;IACjC,MAAMgB,YAAY,GAAGlB,SAAS,CAACC,KAAK,EAAEC,IAAI,CAAC;IAC3CO,aAAa,CAACQ,IAAI,CAACC,YAAY,CAAC;IAChC,IAAI,CAACZ,OAAO,EAAE;MACZA,OAAO,GAAGC,SAAS,GAAGW,YAAY;MAClC,IAAIL,CAAC,GAAG,CAAC,EAAE;QACT;MACF;MACA;MACA,MAAMM,QAAQ,GAAGL,KAAK,CAACD,CAAC,GAAG,CAAC,CAAC;MAC7B,MAAMO,SAAS,GAAGL,IAAI,CAACC,GAAG,CAACX,IAAI,CAACc,QAAQ,CAAC,CAAC;MAC1C,IAAIC,SAAS,GAAG5B,UAAU,CAAC2B,QAAQ,CAAC,CAACzB,MAAM,EAAE;QAC3CY,OAAO,GAAGN,SAAS,CAACC,KAAK,GAAG,CAAC,EAAEC,IAAI,CAAC;QACpCK,SAAS,GAAG,SAAS,GAAGD,OAAO;MACjC,CAAC,MAAM,IAAIc,SAAS,GAAG5B,UAAU,CAAC2B,QAAQ,CAAC,CAACxB,IAAI,EAAE;QAChDY,SAAS,GAAG,OAAO,GAAGW,YAAY;MACpC;IACF;EACF,CAAC,CAAC;EACF,OAAO;IAAEX,SAAS;IAAED,OAAO;IAAEE,WAAW;IAAEC;EAAc,CAAC;AAC3D,CAAC;AACD,eAAeL,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}