{"ast":null,"code":"import { normalize } from '../fns.js';\nimport { short, long } from '../data/days.js';\n\n//is it 'wednesday'?\nconst isDay = function (unit) {\n  if (short().find(s => s === unit)) {\n    return true;\n  }\n  if (long().find(s => s === unit)) {\n    return true;\n  }\n  return false;\n};\n\n// return a list of the weeks/months/days between a -> b\n// returns spacetime objects in the timezone of the input\nconst every = function (start, unit, end) {\n  if (!unit || !end) {\n    return [];\n  }\n  //cleanup unit param\n  unit = normalize(unit);\n  //cleanup to param\n  end = start.clone().set(end);\n  //swap them, if they're backwards\n  if (start.isAfter(end)) {\n    let tmp = start;\n    start = end;\n    end = tmp;\n  }\n\n  //support 'every wednesday'\n  let d = start.clone();\n  if (isDay(unit)) {\n    d = d.next(unit);\n    unit = 'week';\n  } else {\n    let first = d.startOf(unit);\n    if (first.isBefore(start)) {\n      d = d.next(unit);\n    }\n  }\n  //okay, actually start doing it\n  let result = [];\n  while (d.isBefore(end)) {\n    result.push(d);\n    d = d.add(1, unit);\n  }\n  return result;\n};\nexport default every;","map":{"version":3,"names":["normalize","short","long","isDay","unit","find","s","every","start","end","clone","set","isAfter","tmp","d","next","first","startOf","isBefore","result","push","add"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/node_modules/spacetime/src/methods/every.js"],"sourcesContent":["import { normalize } from '../fns.js'\nimport { short, long } from '../data/days.js'\n\n//is it 'wednesday'?\nconst isDay = function (unit) {\n  if (short().find((s) => s === unit)) {\n    return true\n  }\n  if (long().find((s) => s === unit)) {\n    return true\n  }\n  return false\n}\n\n// return a list of the weeks/months/days between a -> b\n// returns spacetime objects in the timezone of the input\nconst every = function (start, unit, end) {\n  if (!unit || !end) {\n    return []\n  }\n  //cleanup unit param\n  unit = normalize(unit)\n  //cleanup to param\n  end = start.clone().set(end)\n  //swap them, if they're backwards\n  if (start.isAfter(end)) {\n    let tmp = start\n    start = end\n    end = tmp\n  }\n\n  //support 'every wednesday'\n  let d = start.clone()\n  if (isDay(unit)) {\n    d = d.next(unit)\n    unit = 'week'\n  } else {\n    let first = d.startOf(unit)\n    if (first.isBefore(start)) {\n      d = d.next(unit)\n    }\n  }\n  //okay, actually start doing it\n  let result = []\n  while (d.isBefore(end)) {\n    result.push(d)\n    d = d.add(1, unit)\n  }\n  return result\n}\nexport default every\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,WAAW;AACrC,SAASC,KAAK,EAAEC,IAAI,QAAQ,iBAAiB;;AAE7C;AACA,MAAMC,KAAK,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAC5B,IAAIH,KAAK,CAAC,CAAC,CAACI,IAAI,CAAEC,CAAC,IAAKA,CAAC,KAAKF,IAAI,CAAC,EAAE;IACnC,OAAO,IAAI;EACb;EACA,IAAIF,IAAI,CAAC,CAAC,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,KAAKF,IAAI,CAAC,EAAE;IAClC,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA,MAAMG,KAAK,GAAG,SAAAA,CAAUC,KAAK,EAAEJ,IAAI,EAAEK,GAAG,EAAE;EACxC,IAAI,CAACL,IAAI,IAAI,CAACK,GAAG,EAAE;IACjB,OAAO,EAAE;EACX;EACA;EACAL,IAAI,GAAGJ,SAAS,CAACI,IAAI,CAAC;EACtB;EACAK,GAAG,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC,CAACC,GAAG,CAACF,GAAG,CAAC;EAC5B;EACA,IAAID,KAAK,CAACI,OAAO,CAACH,GAAG,CAAC,EAAE;IACtB,IAAII,GAAG,GAAGL,KAAK;IACfA,KAAK,GAAGC,GAAG;IACXA,GAAG,GAAGI,GAAG;EACX;;EAEA;EACA,IAAIC,CAAC,GAAGN,KAAK,CAACE,KAAK,CAAC,CAAC;EACrB,IAAIP,KAAK,CAACC,IAAI,CAAC,EAAE;IACfU,CAAC,GAAGA,CAAC,CAACC,IAAI,CAACX,IAAI,CAAC;IAChBA,IAAI,GAAG,MAAM;EACf,CAAC,MAAM;IACL,IAAIY,KAAK,GAAGF,CAAC,CAACG,OAAO,CAACb,IAAI,CAAC;IAC3B,IAAIY,KAAK,CAACE,QAAQ,CAACV,KAAK,CAAC,EAAE;MACzBM,CAAC,GAAGA,CAAC,CAACC,IAAI,CAACX,IAAI,CAAC;IAClB;EACF;EACA;EACA,IAAIe,MAAM,GAAG,EAAE;EACf,OAAOL,CAAC,CAACI,QAAQ,CAACT,GAAG,CAAC,EAAE;IACtBU,MAAM,CAACC,IAAI,CAACN,CAAC,CAAC;IACdA,CAAC,GAAGA,CAAC,CAACO,GAAG,CAAC,CAAC,EAAEjB,IAAI,CAAC;EACpB;EACA,OAAOe,MAAM;AACf,CAAC;AACD,eAAeZ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}