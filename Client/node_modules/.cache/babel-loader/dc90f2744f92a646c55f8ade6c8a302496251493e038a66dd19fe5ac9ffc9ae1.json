{"ast":null,"code":"import walkTo from '../../methods/set/walk.js';\nimport { toCardinal } from '../../fns.js';\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js';\nexport default [\n// =====\n//  m-d-y\n// =====\n//mm/dd/yyyy - uk/canada \"6/28/2019, 12:26:14 PM\"\n{\n  reg: /^([0-9]{1,2})[\\-\\/.]([0-9]{1,2})[\\-\\/.]?([0-9]{4})?( [0-9]{1,2}:[0-9]{2}:?[0-9]{0,2}? ?(am|pm|gmt))?$/i,\n  parse: (s, arr) => {\n    let month = parseInt(arr[1], 10) - 1;\n    let date = parseInt(arr[2], 10);\n    //support dd/mm/yyy\n    if (s.british || month >= 12) {\n      date = parseInt(arr[1], 10);\n      month = parseInt(arr[2], 10) - 1;\n    }\n    let obj = {\n      date,\n      month,\n      year: parseYear(arr[3], s._today) || new Date().getFullYear()\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s, arr[4]);\n    return s;\n  }\n},\n//alt short format - \"feb-25-2015\"\n{\n  reg: /^([a-z]+)[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]?([0-9]{4}|'[0-9]{2})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n  parse: (s, arr) => {\n    let obj = {\n      year: parseYear(arr[3], s._today),\n      month: parseMonth(arr[1]),\n      date: toCardinal(arr[2] || '')\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s, arr[4]);\n    return s;\n  }\n},\n//Long \"Mar 25 2015\"\n//February 22, 2017 15:30:00\n{\n  reg: /^([a-z]+) ([0-9]{1,2})( [0-9]{4})?( ([0-9:]+( ?am| ?pm| ?gmt)?))?$/i,\n  parse: (s, arr) => {\n    let obj = {\n      year: parseYear(arr[3], s._today),\n      month: parseMonth(arr[1]),\n      date: toCardinal(arr[2] || '')\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s, arr[4]);\n    return s;\n  }\n},\n// 'Sun Mar 14 15:09:48 +0000 2021'\n{\n  reg: /^([a-z]+) ([0-9]{1,2})( [0-9:]+)?( \\+[0-9]{4})?( [0-9]{4})?$/i,\n  parse: (s, arr) => {\n    let obj = {\n      year: parseYear(arr[5], s._today),\n      month: parseMonth(arr[1]),\n      date: toCardinal(arr[2] || '')\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s, arr[3]);\n    return s;\n  }\n}];","map":{"version":3,"names":["walkTo","toCardinal","validate","parseTime","parseYear","parseMonth","reg","parse","s","arr","month","parseInt","date","british","obj","year","_today","Date","getFullYear","epoch"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/input/formats/02-mdy.js"],"sourcesContent":["import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  //  m-d-y\n  // =====\n  //mm/dd/yyyy - uk/canada \"6/28/2019, 12:26:14 PM\"\n  {\n    reg: /^([0-9]{1,2})[\\-\\/.]([0-9]{1,2})[\\-\\/.]?([0-9]{4})?( [0-9]{1,2}:[0-9]{2}:?[0-9]{0,2}? ?(am|pm|gmt))?$/i,\n    parse: (s, arr) => {\n      let month = parseInt(arr[1], 10) - 1\n      let date = parseInt(arr[2], 10)\n      //support dd/mm/yyy\n      if (s.british || month >= 12) {\n        date = parseInt(arr[1], 10)\n        month = parseInt(arr[2], 10) - 1\n      }\n      let obj = {\n        date,\n        month,\n        year: parseYear(arr[3], s._today) || new Date().getFullYear()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  //alt short format - \"feb-25-2015\"\n  {\n    reg: /^([a-z]+)[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]?([0-9]{4}|'[0-9]{2})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  //Long \"Mar 25 2015\"\n  //February 22, 2017 15:30:00\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9]{4})?( ([0-9:]+( ?am| ?pm| ?gmt)?))?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  // 'Sun Mar 14 15:09:48 +0000 2021'\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9:]+)?( \\+[0-9]{4})?( [0-9]{4})?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[5], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[3])\n      return s\n    }\n  }\n]\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}