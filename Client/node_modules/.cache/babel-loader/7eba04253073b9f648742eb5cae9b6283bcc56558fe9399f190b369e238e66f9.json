{"ast":null,"code":"import seasons from '../data/seasons.js';\nimport quarters from '../data/quarters.js';\nimport walkTo from './set/walk.js';\nimport { normalize } from '../fns.js';\nconst units = {\n  second: s => {\n    walkTo(s, {\n      millisecond: 0\n    });\n    return s;\n  },\n  minute: s => {\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  quarterhour: s => {\n    let minute = s.minutes();\n    if (minute >= 45) {\n      s = s.minutes(45);\n    } else if (minute >= 30) {\n      s = s.minutes(30);\n    } else if (minute >= 15) {\n      s = s.minutes(15);\n    } else {\n      s = s.minutes(0);\n    }\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  hour: s => {\n    walkTo(s, {\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  day: s => {\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  week: s => {\n    let original = s.clone();\n    s = s.day(s._weekStart); //monday\n    if (s.isAfter(original)) {\n      s = s.subtract(1, 'week');\n    }\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  month: s => {\n    walkTo(s, {\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  quarter: s => {\n    let q = s.quarter();\n    if (quarters[q]) {\n      walkTo(s, {\n        month: quarters[q][0],\n        date: quarters[q][1],\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0\n      });\n    }\n    return s;\n  },\n  season: s => {\n    let current = s.season();\n    let hem = 'north';\n    if (s.hemisphere() === 'South') {\n      hem = 'south';\n    }\n    for (let i = 0; i < seasons[hem].length; i++) {\n      if (seasons[hem][i][0] === current) {\n        //winter goes between years\n        let year = s.year();\n        if (current === 'winter' && s.month() < 3) {\n          year -= 1;\n        }\n        walkTo(s, {\n          year,\n          month: seasons[hem][i][1],\n          date: seasons[hem][i][2],\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        });\n        return s;\n      }\n    }\n    return s;\n  },\n  year: s => {\n    walkTo(s, {\n      month: 0,\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    });\n    return s;\n  },\n  decade: s => {\n    s = s.startOf('year');\n    let year = s.year();\n    let decade = parseInt(year / 10, 10) * 10;\n    s = s.year(decade);\n    return s;\n  },\n  century: s => {\n    s = s.startOf('year');\n    let year = s.year();\n    // near 0AD goes '-1 | +1'\n    let decade = parseInt(year / 100, 10) * 100;\n    s = s.year(decade);\n    return s;\n  }\n};\nunits.date = units.day;\nconst startOf = (a, unit) => {\n  let s = a.clone();\n  unit = normalize(unit);\n  if (units[unit]) {\n    return units[unit](s);\n  }\n  if (unit === 'summer' || unit === 'winter') {\n    s = s.season(unit);\n    return units.season(s);\n  }\n  return s;\n};\n\n//piggy-backs off startOf\nconst endOf = (a, unit) => {\n  let s = a.clone();\n  unit = normalize(unit);\n  if (units[unit]) {\n    // go to beginning, go to next one, step back 1ms\n    s = units[unit](s); // startof\n    s = s.add(1, unit);\n    s = s.subtract(1, 'millisecond');\n    return s;\n  }\n  return s;\n};\nexport { startOf, endOf };","map":{"version":3,"names":["seasons","quarters","walkTo","normalize","units","second","s","millisecond","minute","quarterhour","minutes","hour","day","week","original","clone","_weekStart","isAfter","subtract","month","date","quarter","q","season","current","hem","hemisphere","i","length","year","decade","startOf","parseInt","century","a","unit","endOf","add"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/node_modules/spacetime/src/methods/startOf.js"],"sourcesContent":["import seasons from '../data/seasons.js'\nimport quarters from '../data/quarters.js'\nimport walkTo from './set/walk.js'\nimport { normalize } from '../fns.js'\n\nconst units = {\n  second: (s) => {\n    walkTo(s, {\n      millisecond: 0\n    })\n    return s\n  },\n  minute: (s) => {\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarterhour: (s) => {\n    let minute = s.minutes()\n    if (minute >= 45) {\n      s = s.minutes(45)\n    } else if (minute >= 30) {\n      s = s.minutes(30)\n    } else if (minute >= 15) {\n      s = s.minutes(15)\n    } else {\n      s = s.minutes(0)\n    }\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  hour: (s) => {\n    walkTo(s, {\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  day: (s) => {\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  week: (s) => {\n    let original = s.clone()\n    s = s.day(s._weekStart) //monday\n    if (s.isAfter(original)) {\n      s = s.subtract(1, 'week')\n    }\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  month: (s) => {\n    walkTo(s, {\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarter: (s) => {\n    let q = s.quarter()\n    if (quarters[q]) {\n      walkTo(s, {\n        month: quarters[q][0],\n        date: quarters[q][1],\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0\n      })\n    }\n    return s\n  },\n  season: (s) => {\n    let current = s.season()\n    let hem = 'north'\n    if (s.hemisphere() === 'South') {\n      hem = 'south'\n    }\n    for (let i = 0; i < seasons[hem].length; i++) {\n      if (seasons[hem][i][0] === current) {\n        //winter goes between years\n        let year = s.year()\n        if (current === 'winter' && s.month() < 3) {\n          year -= 1\n        }\n        walkTo(s, {\n          year,\n          month: seasons[hem][i][1],\n          date: seasons[hem][i][2],\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        })\n        return s\n      }\n    }\n    return s\n  },\n  year: (s) => {\n    walkTo(s, {\n      month: 0,\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  decade: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    let decade = parseInt(year / 10, 10) * 10\n    s = s.year(decade)\n    return s\n  },\n  century: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    // near 0AD goes '-1 | +1'\n    let decade = parseInt(year / 100, 10) * 100\n    s = s.year(decade)\n    return s\n  }\n}\nunits.date = units.day\n\nconst startOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    return units[unit](s)\n  }\n  if (unit === 'summer' || unit === 'winter') {\n    s = s.season(unit)\n    return units.season(s)\n  }\n  return s\n}\n\n//piggy-backs off startOf\nconst endOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    // go to beginning, go to next one, step back 1ms\n    s = units[unit](s) // startof\n    s = s.add(1, unit)\n    s = s.subtract(1, 'millisecond')\n    return s\n  }\n  return s\n}\nexport {\n  startOf,\n  endOf\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}