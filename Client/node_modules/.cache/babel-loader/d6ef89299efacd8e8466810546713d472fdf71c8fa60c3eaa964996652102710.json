{"ast":null,"code":"import monthLengths from '../../data/monthLengths.js';\nimport { isLeapYear } from '../../fns.js';\nimport { mapping } from '../../data/months.js';\nlet months = mapping();\nimport parseOffset from './parseOffset.js';\nimport parseTime from './parseTime.js';\n\n//given a month, return whether day number exists in it\nconst validate = obj => {\n  //invalid values\n  if (monthLengths.hasOwnProperty(obj.month) !== true) {\n    return false;\n  }\n  //support leap-year in february\n  if (obj.month === 1) {\n    if (isLeapYear(obj.year) && obj.date <= 29) {\n      return true;\n    } else {\n      return obj.date <= 28;\n    }\n  }\n  //is this date too-big for this month?\n  let max = monthLengths[obj.month] || 0;\n  if (obj.date <= max) {\n    return true;\n  }\n  return false;\n};\nconst parseYear = (str = '', today) => {\n  str = str.trim();\n  // parse '86 shorthand\n  if (/^'[0-9][0-9]$/.test(str) === true) {\n    let num = Number(str.replace(/'/, ''));\n    if (num > 50) {\n      return 1900 + num;\n    }\n    return 2000 + num;\n  }\n  let year = parseInt(str, 10);\n  // use a given year from options.today\n  if (!year && today) {\n    year = today.year;\n  }\n  // fallback to this year\n  year = year || new Date().getFullYear();\n  return year;\n};\nconst parseMonth = function (str) {\n  str = str.toLowerCase().trim();\n  if (str === 'sept') {\n    return months.sep;\n  }\n  return months[str];\n};\nexport { parseOffset, parseTime, parseYear, parseMonth, validate };","map":{"version":3,"names":["monthLengths","isLeapYear","mapping","months","parseOffset","parseTime","validate","obj","hasOwnProperty","month","year","date","max","parseYear","str","today","trim","test","num","Number","replace","parseInt","Date","getFullYear","parseMonth","toLowerCase","sep"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/input/formats/_parsers.js"],"sourcesContent":["import monthLengths from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\nimport { mapping } from '../../data/months.js'\nlet months = mapping()\n\nimport parseOffset from './parseOffset.js'\nimport parseTime from './parseTime.js'\n\n//given a month, return whether day number exists in it\nconst validate = (obj) => {\n  //invalid values\n  if (monthLengths.hasOwnProperty(obj.month) !== true) {\n    return false\n  }\n  //support leap-year in february\n  if (obj.month === 1) {\n    if (isLeapYear(obj.year) && obj.date <= 29) {\n      return true\n    } else {\n      return obj.date <= 28\n    }\n  }\n  //is this date too-big for this month?\n  let max = monthLengths[obj.month] || 0\n  if (obj.date <= max) {\n    return true\n  }\n  return false\n}\n\nconst parseYear = (str = '', today) => {\n  str = str.trim()\n  // parse '86 shorthand\n  if (/^'[0-9][0-9]$/.test(str) === true) {\n    let num = Number(str.replace(/'/, ''))\n    if (num > 50) {\n      return 1900 + num\n    }\n    return 2000 + num\n  }\n  let year = parseInt(str, 10)\n  // use a given year from options.today\n  if (!year && today) {\n    year = today.year\n  }\n  // fallback to this year\n  year = year || new Date().getFullYear()\n  return year\n}\n\nconst parseMonth = function (str) {\n  str = str.toLowerCase().trim()\n  if (str === 'sept') {\n    return months.sep\n  }\n  return months[str]\n}\n\nexport {\n  parseOffset,\n  parseTime,\n  parseYear,\n  parseMonth,\n  validate\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,4BAA4B;AACrD,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,IAAIC,MAAM,GAAGD,OAAO,CAAC,CAAC;AAEtB,OAAOE,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,SAAS,MAAM,gBAAgB;;AAEtC;AACA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EACxB;EACA,IAAIP,YAAY,CAACQ,cAAc,CAACD,GAAG,CAACE,KAAK,CAAC,KAAK,IAAI,EAAE;IACnD,OAAO,KAAK;EACd;EACA;EACA,IAAIF,GAAG,CAACE,KAAK,KAAK,CAAC,EAAE;IACnB,IAAIR,UAAU,CAACM,GAAG,CAACG,IAAI,CAAC,IAAIH,GAAG,CAACI,IAAI,IAAI,EAAE,EAAE;MAC1C,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAOJ,GAAG,CAACI,IAAI,IAAI,EAAE;IACvB;EACF;EACA;EACA,IAAIC,GAAG,GAAGZ,YAAY,CAACO,GAAG,CAACE,KAAK,CAAC,IAAI,CAAC;EACtC,IAAIF,GAAG,CAACI,IAAI,IAAIC,GAAG,EAAE;IACnB,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd,CAAC;AAED,MAAMC,SAAS,GAAGA,CAACC,GAAG,GAAG,EAAE,EAAEC,KAAK,KAAK;EACrCD,GAAG,GAAGA,GAAG,CAACE,IAAI,CAAC,CAAC;EAChB;EACA,IAAI,eAAe,CAACC,IAAI,CAACH,GAAG,CAAC,KAAK,IAAI,EAAE;IACtC,IAAII,GAAG,GAAGC,MAAM,CAACL,GAAG,CAACM,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACtC,IAAIF,GAAG,GAAG,EAAE,EAAE;MACZ,OAAO,IAAI,GAAGA,GAAG;IACnB;IACA,OAAO,IAAI,GAAGA,GAAG;EACnB;EACA,IAAIR,IAAI,GAAGW,QAAQ,CAACP,GAAG,EAAE,EAAE,CAAC;EAC5B;EACA,IAAI,CAACJ,IAAI,IAAIK,KAAK,EAAE;IAClBL,IAAI,GAAGK,KAAK,CAACL,IAAI;EACnB;EACA;EACAA,IAAI,GAAGA,IAAI,IAAI,IAAIY,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EACvC,OAAOb,IAAI;AACb,CAAC;AAED,MAAMc,UAAU,GAAG,SAAAA,CAAUV,GAAG,EAAE;EAChCA,GAAG,GAAGA,GAAG,CAACW,WAAW,CAAC,CAAC,CAACT,IAAI,CAAC,CAAC;EAC9B,IAAIF,GAAG,KAAK,MAAM,EAAE;IAClB,OAAOX,MAAM,CAACuB,GAAG;EACnB;EACA,OAAOvB,MAAM,CAACW,GAAG,CAAC;AACpB,CAAC;AAED,SACEV,WAAW,EACXC,SAAS,EACTQ,SAAS,EACTW,UAAU,EACVlB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}