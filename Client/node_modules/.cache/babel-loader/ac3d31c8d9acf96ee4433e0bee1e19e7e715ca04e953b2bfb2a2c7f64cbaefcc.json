{"ast":null,"code":"import findTz from './find.js';\nimport inSummerTime from './summerTime.js';\nconst parseDst = dst => {\n  if (!dst) {\n    return [];\n  }\n  return dst.split('->');\n};\n\n//iana codes are case-sensitive, technically\nconst titleCase = str => {\n  str = str[0].toUpperCase() + str.substr(1);\n  str = str.replace(/[\\/_-]([a-z])/gi, s => {\n    return s.toUpperCase();\n  });\n  str = str.replace(/_(of|es)_/i, s => s.toLowerCase());\n  str = str.replace(/\\/gmt/i, '/GMT');\n  str = str.replace(/\\/Dumontdurville$/i, '/DumontDUrville');\n  str = str.replace(/\\/Mcmurdo$/i, '/McMurdo');\n  str = str.replace(/\\/Port-au-prince$/i, '/Port-au-Prince');\n  return str;\n};\n\n//get metadata about this timezone\nconst timezone = s => {\n  let zones = s.timezones;\n  let tz = s.tz;\n  if (zones.hasOwnProperty(tz) === false) {\n    tz = findTz(s.tz, zones);\n  }\n  if (tz === null) {\n    if (s.silent === false) {\n      console.warn(\"Warn: could not find given or local timezone - '\" + s.tz + \"'\");\n    }\n    return {\n      current: {\n        epochShift: 0\n      }\n    };\n  }\n  let found = zones[tz];\n  let result = {\n    name: titleCase(tz),\n    hasDst: Boolean(found.dst),\n    default_offset: found.offset,\n    //do north-hemisphere version as default (sorry!)\n    hemisphere: found.hem === 's' ? 'South' : 'North',\n    current: {}\n  };\n  if (result.hasDst) {\n    let arr = parseDst(found.dst);\n    result.change = {\n      start: arr[0],\n      back: arr[1]\n    };\n  }\n  //find the offsets for summer/winter times\n  //(these variable names are north-centric)\n  let summer = found.offset; // (july)\n  let winter = summer; // (january) assume it's the same for now\n  if (result.hasDst === true) {\n    if (result.hemisphere === 'North') {\n      winter = summer - 1;\n    } else {\n      //southern hemisphere\n      winter = found.offset + 1;\n    }\n  }\n\n  //find out which offset to use right now\n  //use 'summer' time july-time\n  if (result.hasDst === false) {\n    result.current.offset = summer;\n    result.current.isDST = false;\n  } else if (inSummerTime(s.epoch, result.change.start, result.change.back, summer, winter) === true) {\n    result.current.offset = summer;\n    result.current.isDST = result.hemisphere === 'North'; //dst 'on' in winter in north\n  } else {\n    //use 'winter' january-time\n    result.current.offset = winter;\n    result.current.isDST = result.hemisphere === 'South'; //dst 'on' in summer in south\n  }\n\n  return result;\n};\nexport default timezone;","map":{"version":3,"names":["findTz","inSummerTime","parseDst","dst","split","titleCase","str","toUpperCase","substr","replace","s","toLowerCase","timezone","zones","timezones","tz","hasOwnProperty","silent","console","warn","current","epochShift","found","result","name","hasDst","Boolean","default_offset","offset","hemisphere","hem","arr","change","start","back","summer","winter","isDST","epoch"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/timezone/index.js"],"sourcesContent":["import findTz from './find.js'\nimport inSummerTime from './summerTime.js'\n\nconst parseDst = dst => {\n  if (!dst) {\n    return []\n  }\n  return dst.split('->')\n}\n\n//iana codes are case-sensitive, technically\nconst titleCase = str => {\n  str = str[0].toUpperCase() + str.substr(1)\n  str = str.replace(/[\\/_-]([a-z])/gi, s => {\n    return s.toUpperCase()\n  })\n  str = str.replace(/_(of|es)_/i, (s) => s.toLowerCase())\n  str = str.replace(/\\/gmt/i, '/GMT')\n  str = str.replace(/\\/Dumontdurville$/i, '/DumontDUrville')\n  str = str.replace(/\\/Mcmurdo$/i, '/McMurdo')\n  str = str.replace(/\\/Port-au-prince$/i, '/Port-au-Prince')\n  return str\n}\n\n//get metadata about this timezone\nconst timezone = s => {\n  let zones = s.timezones\n  let tz = s.tz\n  if (zones.hasOwnProperty(tz) === false) {\n    tz = findTz(s.tz, zones)\n  }\n  if (tz === null) {\n    if (s.silent === false) {\n      console.warn(\"Warn: could not find given or local timezone - '\" + s.tz + \"'\")\n    }\n    return {\n      current: {\n        epochShift: 0\n      }\n    }\n  }\n  let found = zones[tz]\n  let result = {\n    name: titleCase(tz),\n    hasDst: Boolean(found.dst),\n    default_offset: found.offset,\n    //do north-hemisphere version as default (sorry!)\n    hemisphere: found.hem === 's' ? 'South' : 'North',\n    current: {}\n  }\n\n  if (result.hasDst) {\n    let arr = parseDst(found.dst)\n    result.change = {\n      start: arr[0],\n      back: arr[1]\n    }\n  }\n  //find the offsets for summer/winter times\n  //(these variable names are north-centric)\n  let summer = found.offset // (july)\n  let winter = summer // (january) assume it's the same for now\n  if (result.hasDst === true) {\n    if (result.hemisphere === 'North') {\n      winter = summer - 1\n    } else {\n      //southern hemisphere\n      winter = found.offset + 1\n    }\n  }\n\n  //find out which offset to use right now\n  //use 'summer' time july-time\n  if (result.hasDst === false) {\n    result.current.offset = summer\n    result.current.isDST = false\n  } else if (inSummerTime(s.epoch, result.change.start, result.change.back, summer, winter) === true) {\n    result.current.offset = summer\n    result.current.isDST = result.hemisphere === 'North' //dst 'on' in winter in north\n  } else {\n    //use 'winter' january-time\n    result.current.offset = winter\n    result.current.isDST = result.hemisphere === 'South' //dst 'on' in summer in south\n  }\n  return result\n}\nexport default timezone\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}