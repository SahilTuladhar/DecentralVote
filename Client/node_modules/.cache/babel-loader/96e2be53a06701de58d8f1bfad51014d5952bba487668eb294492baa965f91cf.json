{"ast":null,"code":"import { milliseconds, seconds, minutes, hours, time as _time } from '../set/set.js';\nimport { am, pm } from '../../data/ampm.js';\nimport { zeroPad } from '../../fns.js';\nconst methods = {\n  millisecond: function (num) {\n    if (num !== undefined) {\n      let s = this.clone();\n      s.epoch = milliseconds(s, num);\n      return s;\n    }\n    return this.d.getMilliseconds();\n  },\n  second: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone();\n      s.epoch = seconds(s, num, goFwd);\n      return s;\n    }\n    return this.d.getSeconds();\n  },\n  minute: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone();\n      s.epoch = minutes(s, num, goFwd);\n      return s;\n    }\n    return this.d.getMinutes();\n  },\n  hour: function (num, goFwd) {\n    let d = this.d;\n    if (num !== undefined) {\n      let s = this.clone();\n      s.epoch = hours(s, num, goFwd);\n      return s;\n    }\n    return d.getHours();\n  },\n  //'3:30' is 3.5\n  hourFloat: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone();\n      let minute = num % 1;\n      minute = minute * 60;\n      let hour = parseInt(num, 10);\n      s.epoch = hours(s, hour, goFwd);\n      s.epoch = minutes(s, minute, goFwd);\n      return s;\n    }\n    let d = this.d;\n    let hour = d.getHours();\n    let minute = d.getMinutes();\n    minute = minute / 60;\n    return hour + minute;\n  },\n  // hour in 12h format\n  hour12: function (str, goFwd) {\n    let d = this.d;\n    if (str !== undefined) {\n      let s = this.clone();\n      str = '' + str;\n      let m = str.match(/^([0-9]+)(am|pm)$/);\n      if (m) {\n        let hour = parseInt(m[1], 10);\n        if (m[2] === 'pm') {\n          hour += 12;\n        }\n        s.epoch = hours(s, hour, goFwd);\n      }\n      return s;\n    }\n    //get the hour\n    let hour12 = d.getHours();\n    if (hour12 > 12) {\n      hour12 = hour12 - 12;\n    }\n    if (hour12 === 0) {\n      hour12 = 12;\n    }\n    return hour12;\n  },\n  //some ambiguity here with 12/24h\n  time: function (str, goFwd) {\n    if (str !== undefined) {\n      let s = this.clone();\n      str = str.toLowerCase().trim();\n      s.epoch = _time(s, str, goFwd);\n      return s;\n    }\n    return `${this.h12()}:${zeroPad(this.minute())}${this.ampm()}`;\n  },\n  // either 'am' or 'pm'\n  ampm: function (input, goFwd) {\n    // let which = 'am'\n    let which = am();\n    let hour = this.hour();\n    if (hour >= 12) {\n      // which = 'pm'\n      which = pm();\n    }\n    if (typeof input !== 'string') {\n      return which;\n    }\n    //okay, we're doing a setter\n    let s = this.clone();\n    input = input.toLowerCase().trim();\n    //ampm should never change the day\n    // - so use `.hour(n)` instead of `.minus(12,'hour')`\n    if (hour >= 12 && input === 'am') {\n      //noon is 12pm\n      hour -= 12;\n      return s.hour(hour, goFwd);\n    }\n    if (hour < 12 && input === 'pm') {\n      hour += 12;\n      return s.hour(hour, goFwd);\n    }\n    return s;\n  },\n  //some hard-coded times of day, like 'noon'\n  dayTime: function (str, goFwd) {\n    if (str !== undefined) {\n      const times = {\n        morning: '7:00',\n        breakfast: '7:00',\n        noon: '12:00',\n        lunch: '12:00',\n        afternoon: '14:00',\n        evening: '18:00',\n        dinner: '18:00',\n        night: '23:00',\n        midnight: '00:00'\n      };\n      let s = this.clone();\n      str = str || '';\n      str = str.toLowerCase();\n      if (times.hasOwnProperty(str) === true) {\n        s = s.time(times[str], goFwd);\n      }\n      return s;\n    }\n    let h = this.hour();\n    if (h < 6) {\n      return 'night';\n    }\n    if (h < 12) {\n      //until noon\n      return 'morning';\n    }\n    if (h < 17) {\n      //until 5pm\n      return 'afternoon';\n    }\n    if (h < 22) {\n      //until 10pm\n      return 'evening';\n    }\n    return 'night';\n  },\n  //parse a proper iso string\n  iso: function (num) {\n    if (num !== undefined) {\n      return this.set(num);\n    }\n    return this.format('iso');\n  }\n};\nexport default methods;","map":{"version":3,"names":["milliseconds","seconds","minutes","hours","time","_time","am","pm","zeroPad","methods","millisecond","num","undefined","s","clone","epoch","d","getMilliseconds","second","goFwd","getSeconds","minute","getMinutes","hour","getHours","hourFloat","parseInt","hour12","str","m","match","toLowerCase","trim","h12","ampm","input","which","dayTime","times","morning","breakfast","noon","lunch","afternoon","evening","dinner","night","midnight","hasOwnProperty","h","iso","set","format"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/methods/query/01-time.js"],"sourcesContent":["import { milliseconds, seconds, minutes, hours, time as _time } from '../set/set.js'\nimport { am, pm } from '../../data/ampm.js'\nimport { zeroPad } from '../../fns.js'\n\nconst methods = {\n  millisecond: function (num) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = milliseconds(s, num)\n      return s\n    }\n    return this.d.getMilliseconds()\n  },\n  second: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = seconds(s, num, goFwd)\n      return s\n    }\n    return this.d.getSeconds()\n  },\n  minute: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = minutes(s, num, goFwd)\n      return s\n    }\n    return this.d.getMinutes()\n  },\n  hour: function (num, goFwd) {\n    let d = this.d\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = hours(s, num, goFwd)\n      return s\n    }\n    return d.getHours()\n  },\n\n  //'3:30' is 3.5\n  hourFloat: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      let minute = num % 1\n      minute = minute * 60\n      let hour = parseInt(num, 10)\n      s.epoch = hours(s, hour, goFwd)\n      s.epoch = minutes(s, minute, goFwd)\n      return s\n    }\n    let d = this.d\n    let hour = d.getHours()\n    let minute = d.getMinutes()\n    minute = minute / 60\n    return hour + minute\n  },\n\n  // hour in 12h format\n  hour12: function (str, goFwd) {\n    let d = this.d\n    if (str !== undefined) {\n      let s = this.clone()\n      str = '' + str\n      let m = str.match(/^([0-9]+)(am|pm)$/)\n      if (m) {\n        let hour = parseInt(m[1], 10)\n        if (m[2] === 'pm') {\n          hour += 12\n        }\n        s.epoch = hours(s, hour, goFwd)\n      }\n      return s\n    }\n    //get the hour\n    let hour12 = d.getHours()\n    if (hour12 > 12) {\n      hour12 = hour12 - 12\n    }\n    if (hour12 === 0) {\n      hour12 = 12\n    }\n    return hour12\n  },\n\n  //some ambiguity here with 12/24h\n  time: function (str, goFwd) {\n    if (str !== undefined) {\n      let s = this.clone()\n      str = str.toLowerCase().trim()\n      s.epoch = _time(s, str, goFwd)\n      return s\n    }\n    return `${this.h12()}:${zeroPad(this.minute())}${this.ampm()}`\n  },\n\n  // either 'am' or 'pm'\n  ampm: function (input, goFwd) {\n    // let which = 'am'\n    let which = am()\n    let hour = this.hour()\n    if (hour >= 12) {\n      // which = 'pm'\n      which = pm()\n    }\n    if (typeof input !== 'string') {\n      return which\n    }\n    //okay, we're doing a setter\n    let s = this.clone()\n    input = input.toLowerCase().trim()\n    //ampm should never change the day\n    // - so use `.hour(n)` instead of `.minus(12,'hour')`\n    if (hour >= 12 && input === 'am') {\n      //noon is 12pm\n      hour -= 12\n      return s.hour(hour, goFwd)\n    }\n    if (hour < 12 && input === 'pm') {\n      hour += 12\n      return s.hour(hour, goFwd)\n    }\n    return s\n  },\n\n  //some hard-coded times of day, like 'noon'\n  dayTime: function (str, goFwd) {\n    if (str !== undefined) {\n      const times = {\n        morning: '7:00',\n        breakfast: '7:00',\n        noon: '12:00',\n        lunch: '12:00',\n        afternoon: '14:00',\n        evening: '18:00',\n        dinner: '18:00',\n        night: '23:00',\n        midnight: '00:00'\n      }\n      let s = this.clone()\n      str = str || ''\n      str = str.toLowerCase()\n      if (times.hasOwnProperty(str) === true) {\n        s = s.time(times[str], goFwd)\n      }\n      return s\n    }\n    let h = this.hour()\n    if (h < 6) {\n      return 'night'\n    }\n    if (h < 12) {\n      //until noon\n      return 'morning'\n    }\n    if (h < 17) {\n      //until 5pm\n      return 'afternoon'\n    }\n    if (h < 22) {\n      //until 10pm\n      return 'evening'\n    }\n    return 'night'\n  },\n\n  //parse a proper iso string\n  iso: function (num) {\n    if (num !== undefined) {\n      return this.set(num)\n    }\n    return this.format('iso')\n  }\n}\nexport default methods\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}