{"ast":null,"code":"import { zeroPad as pad } from '../../fns.js';\nimport { formatTimezone } from '../../fns.js';\n//parse this insane unix-time-templating thing, from the 19th century\n//http://unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n\n//time-symbols we support\nconst mapping = {\n  G: s => s.era(),\n  GG: s => s.era(),\n  GGG: s => s.era(),\n  GGGG: s => s.era() === 'AD' ? 'Anno Domini' : 'Before Christ',\n  //year\n  y: s => s.year(),\n  yy: s => {\n    //last two chars\n    return pad(Number(String(s.year()).substr(2, 4)));\n  },\n  yyy: s => s.year(),\n  yyyy: s => s.year(),\n  yyyyy: s => '0' + s.year(),\n  // u: (s) => {},//extended non-gregorian years\n\n  //quarter\n  Q: s => s.quarter(),\n  QQ: s => s.quarter(),\n  QQQ: s => s.quarter(),\n  QQQQ: s => s.quarter(),\n  //month\n  M: s => s.month() + 1,\n  MM: s => pad(s.month() + 1),\n  MMM: s => s.format('month-short'),\n  MMMM: s => s.format('month'),\n  //week\n  w: s => s.week(),\n  ww: s => pad(s.week()),\n  //week of month\n  // W: (s) => s.week(),\n\n  //date of month\n  d: s => s.date(),\n  dd: s => pad(s.date()),\n  //date of year\n  D: s => s.dayOfYear(),\n  DD: s => pad(s.dayOfYear()),\n  DDD: s => pad(s.dayOfYear(), 3),\n  // F: (s) => {},//date of week in month\n  // g: (s) => {},//modified julian day\n\n  //day\n  E: s => s.format('day-short'),\n  EE: s => s.format('day-short'),\n  EEE: s => s.format('day-short'),\n  EEEE: s => s.format('day'),\n  EEEEE: s => s.format('day')[0],\n  e: s => s.day(),\n  ee: s => s.day(),\n  eee: s => s.format('day-short'),\n  eeee: s => s.format('day'),\n  eeeee: s => s.format('day')[0],\n  //am/pm\n  a: s => s.ampm().toUpperCase(),\n  aa: s => s.ampm().toUpperCase(),\n  aaa: s => s.ampm().toUpperCase(),\n  aaaa: s => s.ampm().toUpperCase(),\n  //hour\n  h: s => s.h12(),\n  hh: s => pad(s.h12()),\n  H: s => s.hour(),\n  HH: s => pad(s.hour()),\n  // j: (s) => {},//weird hour format\n\n  m: s => s.minute(),\n  mm: s => pad(s.minute()),\n  s: s => s.second(),\n  ss: s => pad(s.second()),\n  //milliseconds\n  SSS: s => pad(s.millisecond(), 3),\n  //milliseconds in the day\n  A: s => s.epoch - s.startOf('day').epoch,\n  //timezone\n  z: s => s.timezone().name,\n  zz: s => s.timezone().name,\n  zzz: s => s.timezone().name,\n  zzzz: s => s.timezone().name,\n  Z: s => formatTimezone(s.timezone().current.offset),\n  ZZ: s => formatTimezone(s.timezone().current.offset),\n  ZZZ: s => formatTimezone(s.timezone().current.offset),\n  ZZZZ: s => formatTimezone(s.timezone().current.offset, ':')\n};\nconst addAlias = (char, to, n) => {\n  let name = char;\n  let toName = to;\n  for (let i = 0; i < n; i += 1) {\n    mapping[name] = mapping[toName];\n    name += char;\n    toName += to;\n  }\n};\naddAlias('q', 'Q', 4);\naddAlias('L', 'M', 4);\naddAlias('Y', 'y', 4);\naddAlias('c', 'e', 4);\naddAlias('k', 'H', 2);\naddAlias('K', 'h', 2);\naddAlias('S', 's', 2);\naddAlias('v', 'z', 4);\naddAlias('V', 'Z', 4);\n\n// support unix-style escaping with ' character\nconst escapeChars = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] === `'`) {\n      // greedy-search for next apostrophe\n      for (let o = i + 1; o < arr.length; o += 1) {\n        if (arr[o]) {\n          arr[i] += arr[o];\n        }\n        if (arr[o] === `'`) {\n          arr[o] = null;\n          break;\n        }\n        arr[o] = null;\n      }\n    }\n  }\n  return arr.filter(ch => ch);\n};\n\n//combine consecutive chars, like 'yyyy' as one.\nconst combineRepeated = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    let c = arr[i];\n    // greedy-forward\n    for (let o = i + 1; o < arr.length; o += 1) {\n      if (arr[o] === c) {\n        arr[i] += arr[o];\n        arr[o] = null;\n      } else {\n        break;\n      }\n    }\n  }\n  // '' means one apostrophe\n  arr = arr.filter(ch => ch);\n  arr = arr.map(str => {\n    if (str === `''`) {\n      str = `'`;\n    }\n    return str;\n  });\n  return arr;\n};\nconst unixFmt = (s, str) => {\n  let arr = str.split('');\n  // support character escaping\n  arr = escapeChars(arr);\n  //combine 'yyyy' as string.\n  arr = combineRepeated(arr);\n  return arr.reduce((txt, c) => {\n    if (mapping[c] !== undefined) {\n      txt += mapping[c](s) || '';\n    } else {\n      // 'unescape'\n      if (/^'.{1,}'$/.test(c)) {\n        c = c.replace(/'/g, '');\n      }\n      txt += c;\n    }\n    return txt;\n  }, '');\n};\nexport default unixFmt;","map":{"version":3,"names":["zeroPad","pad","formatTimezone","mapping","G","s","era","GG","GGG","GGGG","y","year","yy","Number","String","substr","yyy","yyyy","yyyyy","Q","quarter","QQ","QQQ","QQQQ","M","month","MM","MMM","format","MMMM","w","week","ww","d","date","dd","D","dayOfYear","DD","DDD","E","EE","EEE","EEEE","EEEEE","e","day","ee","eee","eeee","eeeee","a","ampm","toUpperCase","aa","aaa","aaaa","h","h12","hh","H","hour","HH","m","minute","mm","second","ss","SSS","millisecond","A","epoch","startOf","z","timezone","name","zz","zzz","zzzz","Z","current","offset","ZZ","ZZZ","ZZZZ","addAlias","char","to","n","toName","i","escapeChars","arr","length","o","filter","ch","combineRepeated","c","map","str","unixFmt","split","reduce","txt","undefined","test","replace"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/methods/format/unixFmt.js"],"sourcesContent":["import { zeroPad as pad } from '../../fns.js'\nimport { formatTimezone } from '../../fns.js'\n//parse this insane unix-time-templating thing, from the 19th century\n//http://unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n\n//time-symbols we support\nconst mapping = {\n  G: (s) => s.era(),\n  GG: (s) => s.era(),\n  GGG: (s) => s.era(),\n  GGGG: (s) => (s.era() === 'AD' ? 'Anno Domini' : 'Before Christ'),\n  //year\n  y: (s) => s.year(),\n  yy: (s) => {\n    //last two chars\n    return pad(Number(String(s.year()).substr(2, 4)))\n  },\n  yyy: (s) => s.year(),\n  yyyy: (s) => s.year(),\n  yyyyy: (s) => '0' + s.year(),\n  // u: (s) => {},//extended non-gregorian years\n\n  //quarter\n  Q: (s) => s.quarter(),\n  QQ: (s) => s.quarter(),\n  QQQ: (s) => s.quarter(),\n  QQQQ: (s) => s.quarter(),\n\n  //month\n  M: (s) => s.month() + 1,\n  MM: (s) => pad(s.month() + 1),\n  MMM: (s) => s.format('month-short'),\n  MMMM: (s) => s.format('month'),\n\n  //week\n  w: (s) => s.week(),\n  ww: (s) => pad(s.week()),\n  //week of month\n  // W: (s) => s.week(),\n\n  //date of month\n  d: (s) => s.date(),\n  dd: (s) => pad(s.date()),\n  //date of year\n  D: (s) => s.dayOfYear(),\n  DD: (s) => pad(s.dayOfYear()),\n  DDD: (s) => pad(s.dayOfYear(), 3),\n\n  // F: (s) => {},//date of week in month\n  // g: (s) => {},//modified julian day\n\n  //day\n  E: (s) => s.format('day-short'),\n  EE: (s) => s.format('day-short'),\n  EEE: (s) => s.format('day-short'),\n  EEEE: (s) => s.format('day'),\n  EEEEE: (s) => s.format('day')[0],\n  e: (s) => s.day(),\n  ee: (s) => s.day(),\n  eee: (s) => s.format('day-short'),\n  eeee: (s) => s.format('day'),\n  eeeee: (s) => s.format('day')[0],\n\n  //am/pm\n  a: (s) => s.ampm().toUpperCase(),\n  aa: (s) => s.ampm().toUpperCase(),\n  aaa: (s) => s.ampm().toUpperCase(),\n  aaaa: (s) => s.ampm().toUpperCase(),\n\n  //hour\n  h: (s) => s.h12(),\n  hh: (s) => pad(s.h12()),\n  H: (s) => s.hour(),\n  HH: (s) => pad(s.hour()),\n  // j: (s) => {},//weird hour format\n\n  m: (s) => s.minute(),\n  mm: (s) => pad(s.minute()),\n  s: (s) => s.second(),\n  ss: (s) => pad(s.second()),\n\n  //milliseconds\n  SSS: (s) => pad(s.millisecond(), 3),\n  //milliseconds in the day\n  A: (s) => s.epoch - s.startOf('day').epoch,\n  //timezone\n  z: (s) => s.timezone().name,\n  zz: (s) => s.timezone().name,\n  zzz: (s) => s.timezone().name,\n  zzzz: (s) => s.timezone().name,\n  Z: (s) => formatTimezone(s.timezone().current.offset),\n  ZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZZ: (s) => formatTimezone(s.timezone().current.offset, ':')\n}\n\nconst addAlias = (char, to, n) => {\n  let name = char\n  let toName = to\n  for (let i = 0; i < n; i += 1) {\n    mapping[name] = mapping[toName]\n    name += char\n    toName += to\n  }\n}\naddAlias('q', 'Q', 4)\naddAlias('L', 'M', 4)\naddAlias('Y', 'y', 4)\naddAlias('c', 'e', 4)\naddAlias('k', 'H', 2)\naddAlias('K', 'h', 2)\naddAlias('S', 's', 2)\naddAlias('v', 'z', 4)\naddAlias('V', 'Z', 4)\n\n// support unix-style escaping with ' character\nconst escapeChars = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] === `'`) {\n      // greedy-search for next apostrophe\n      for (let o = i + 1; o < arr.length; o += 1) {\n        if (arr[o]) {\n          arr[i] += arr[o]\n        }\n        if (arr[o] === `'`) {\n          arr[o] = null\n          break\n        }\n        arr[o] = null\n      }\n    }\n  }\n  return arr.filter((ch) => ch)\n}\n\n//combine consecutive chars, like 'yyyy' as one.\nconst combineRepeated = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    let c = arr[i]\n    // greedy-forward\n    for (let o = i + 1; o < arr.length; o += 1) {\n      if (arr[o] === c) {\n        arr[i] += arr[o]\n        arr[o] = null\n      } else {\n        break\n      }\n    }\n  }\n  // '' means one apostrophe\n  arr = arr.filter((ch) => ch)\n  arr = arr.map((str) => {\n    if (str === `''`) {\n      str = `'`\n    }\n    return str\n  })\n  return arr\n}\n\nconst unixFmt = (s, str) => {\n  let arr = str.split('')\n  // support character escaping\n  arr = escapeChars(arr)\n  //combine 'yyyy' as string.\n  arr = combineRepeated(arr)\n  return arr.reduce((txt, c) => {\n    if (mapping[c] !== undefined) {\n      txt += mapping[c](s) || ''\n    } else {\n      // 'unescape'\n      if (/^'.{1,}'$/.test(c)) {\n        c = c.replace(/'/g, '')\n      }\n      txt += c\n    }\n    return txt\n  }, '')\n}\nexport default unixFmt\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}