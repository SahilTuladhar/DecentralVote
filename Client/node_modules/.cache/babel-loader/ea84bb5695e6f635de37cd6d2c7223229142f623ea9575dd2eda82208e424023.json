{"ast":null,"code":"import walkTo from '../../methods/set/walk.js';\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js';\nexport default [\n// =====\n// no dates\n// =====\n\n// '2012-06' month-only\n{\n  reg: /^([0-9]{4})[\\-\\/]([0-9]{2})$/i,\n  parse: (s, m) => {\n    let obj = {\n      year: m[1],\n      month: parseInt(m[2], 10) - 1,\n      date: 1\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s, m[4]);\n    return s;\n  }\n},\n//February 2017 (implied date)\n{\n  reg: /^([a-z]+) ([0-9]{4})$/i,\n  parse: (s, arr) => {\n    let obj = {\n      year: parseYear(arr[2], s._today),\n      month: parseMonth(arr[1]),\n      date: s._today.date || 1\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s, arr[4]);\n    return s;\n  }\n}, {\n  // 'q2 2002'\n  reg: /^(q[0-9])( of)?( [0-9]{4})?/i,\n  parse: (s, arr) => {\n    let quarter = arr[1] || '';\n    s = s.quarter(quarter);\n    let year = arr[3] || '';\n    if (year) {\n      year = year.trim();\n      s = s.year(year);\n    }\n    return s;\n  }\n}, {\n  // 'summer 2002'\n  reg: /^(spring|summer|winter|fall|autumn)( of)?( [0-9]{4})?/i,\n  parse: (s, arr) => {\n    let season = arr[1] || '';\n    s = s.season(season);\n    let year = arr[3] || '';\n    if (year) {\n      year = year.trim();\n      s = s.year(year);\n    }\n    return s;\n  }\n}, {\n  // '200bc'\n  reg: /^[0-9,]+ ?b\\.?c\\.?$/i,\n  parse: (s, arr) => {\n    let str = arr[0] || '';\n    //make year-negative\n    str = str.replace(/^([0-9,]+) ?b\\.?c\\.?$/i, '-$1');\n    let d = new Date();\n    let obj = {\n      year: parseInt(str.trim(), 10),\n      month: d.getMonth(),\n      date: d.getDate()\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s);\n    return s;\n  }\n}, {\n  // '200ad'\n  reg: /^[0-9,]+ ?(a\\.?d\\.?|c\\.?e\\.?)$/i,\n  parse: (s, arr) => {\n    let str = arr[0] || '';\n    //remove commas\n    str = str.replace(/,/g, '');\n    let d = new Date();\n    let obj = {\n      year: parseInt(str.trim(), 10),\n      month: d.getMonth(),\n      date: d.getDate()\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s);\n    return s;\n  }\n}, {\n  // '1992'\n  reg: /^[0-9]{4}( ?a\\.?d\\.?)?$/i,\n  parse: (s, arr) => {\n    let today = s._today;\n    // using today's date, but a new month is awkward.\n    if (today.month && !today.date) {\n      today.date = 1;\n    }\n    let d = new Date();\n    let obj = {\n      year: parseYear(arr[0], today),\n      month: today.month || d.getMonth(),\n      date: today.date || d.getDate()\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s);\n    return s;\n  }\n}];","map":{"version":3,"names":["walkTo","validate","parseTime","parseYear","parseMonth","reg","parse","s","m","obj","year","month","parseInt","date","epoch","arr","_today","quarter","trim","season","str","replace","d","Date","getMonth","getDate","today"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/input/formats/04-misc.js"],"sourcesContent":["import walkTo from '../../methods/set/walk.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  // no dates\n  // =====\n\n  // '2012-06' month-only\n  {\n    reg: /^([0-9]{4})[\\-\\/]([0-9]{2})$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //February 2017 (implied date)\n  {\n    reg: /^([a-z]+) ([0-9]{4})$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[2], s._today),\n        month: parseMonth(arr[1]),\n        date: s._today.date || 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  {\n    // 'q2 2002'\n    reg: /^(q[0-9])( of)?( [0-9]{4})?/i,\n    parse: (s, arr) => {\n      let quarter = arr[1] || ''\n      s = s.quarter(quarter)\n      let year = arr[3] || ''\n      if (year) {\n        year = year.trim()\n        s = s.year(year)\n      }\n      return s\n    }\n  },\n  {\n    // 'summer 2002'\n    reg: /^(spring|summer|winter|fall|autumn)( of)?( [0-9]{4})?/i,\n    parse: (s, arr) => {\n      let season = arr[1] || ''\n      s = s.season(season)\n      let year = arr[3] || ''\n      if (year) {\n        year = year.trim()\n        s = s.year(year)\n      }\n      return s\n    }\n  },\n  {\n    // '200bc'\n    reg: /^[0-9,]+ ?b\\.?c\\.?$/i,\n    parse: (s, arr) => {\n      let str = arr[0] || ''\n      //make year-negative\n      str = str.replace(/^([0-9,]+) ?b\\.?c\\.?$/i, '-$1')\n      let d = new Date()\n      let obj = {\n        year: parseInt(str.trim(), 10),\n        month: d.getMonth(),\n        date: d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  },\n  {\n    // '200ad'\n    reg: /^[0-9,]+ ?(a\\.?d\\.?|c\\.?e\\.?)$/i,\n    parse: (s, arr) => {\n      let str = arr[0] || ''\n      //remove commas\n      str = str.replace(/,/g, '')\n      let d = new Date()\n      let obj = {\n        year: parseInt(str.trim(), 10),\n        month: d.getMonth(),\n        date: d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  },\n  {\n    // '1992'\n    reg: /^[0-9]{4}( ?a\\.?d\\.?)?$/i,\n    parse: (s, arr) => {\n      let today = s._today\n      // using today's date, but a new month is awkward.\n      if (today.month && !today.date) {\n        today.date = 1\n      }\n      let d = new Date()\n      let obj = {\n        year: parseYear(arr[0], today),\n        month: today.month || d.getMonth(),\n        date: today.date || d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  }\n]\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}