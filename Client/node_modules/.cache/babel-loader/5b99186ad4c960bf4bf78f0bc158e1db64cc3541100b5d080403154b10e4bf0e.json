{"ast":null,"code":"import tzs from '../../zonefile/unpack.js';\nimport guessTz from './guessTz.js';\nimport parseOffset from './parseOffset.js';\nlet local = guessTz();\n\n//add all the city names by themselves\nconst cities = Object.keys(tzs).reduce((h, k) => {\n  let city = k.split('/')[1] || '';\n  city = city.replace(/_/g, ' ');\n  h[city] = k;\n  return h;\n}, {});\n\n//try to match these against iana form\nconst normalize = tz => {\n  tz = tz.replace(/ time/g, '');\n  tz = tz.replace(/ (standard|daylight|summer)/g, '');\n  tz = tz.replace(/\\b(east|west|north|south)ern/g, '$1');\n  tz = tz.replace(/\\b(africa|america|australia)n/g, '$1');\n  tz = tz.replace(/\\beuropean/g, 'europe');\n  tz = tz.replace(/\\islands/g, 'island');\n  return tz;\n};\n\n// try our best to reconcile the timzone to this given string\nconst lookupTz = (str, zones) => {\n  if (!str) {\n    // guard if Intl response is unsupported (#397)\n    if (!zones.hasOwnProperty(local)) {\n      console.warn(`Unrecognized IANA id '${local}'. Setting fallback tz to UTC.`);\n      local = 'utc';\n    }\n    return local;\n  }\n  if (typeof str !== 'string') {\n    console.error(\"Timezone must be a string - recieved: '\", str, \"'\\n\");\n  }\n  let tz = str.trim();\n  // let split = str.split('/')\n  //support long timezones like 'America/Argentina/Rio_Gallegos'\n  // if (split.length > 2 && zones.hasOwnProperty(tz) === false) {\n  //   tz = split[0] + '/' + split[1]\n  // }\n  tz = tz.toLowerCase();\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz;\n  }\n  //lookup more loosely..\n  tz = normalize(tz);\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz;\n  }\n  //try city-names\n  if (cities.hasOwnProperty(tz) === true) {\n    return cities[tz];\n  }\n  // //try to parse '-5h'\n  if (/[0-9]/.test(tz) === true) {\n    let id = parseOffset(tz);\n    if (id) {\n      return id;\n    }\n  }\n  throw new Error(\"Spacetime: Cannot find timezone named: '\" + str + \"'. Please enter an IANA timezone id.\");\n};\nexport default lookupTz;","map":{"version":3,"names":["tzs","guessTz","parseOffset","local","cities","Object","keys","reduce","h","k","city","split","replace","normalize","tz","lookupTz","str","zones","hasOwnProperty","console","warn","error","trim","toLowerCase","test","id","Error"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/timezone/find.js"],"sourcesContent":["import tzs from '../../zonefile/unpack.js'\nimport guessTz from './guessTz.js'\nimport parseOffset from './parseOffset.js'\n\nlet local = guessTz()\n\n//add all the city names by themselves\nconst cities = Object.keys(tzs).reduce((h, k) => {\n  let city = k.split('/')[1] || ''\n  city = city.replace(/_/g, ' ')\n  h[city] = k\n  return h\n}, {})\n\n//try to match these against iana form\nconst normalize = (tz) => {\n  tz = tz.replace(/ time/g, '')\n  tz = tz.replace(/ (standard|daylight|summer)/g, '')\n  tz = tz.replace(/\\b(east|west|north|south)ern/g, '$1')\n  tz = tz.replace(/\\b(africa|america|australia)n/g, '$1')\n  tz = tz.replace(/\\beuropean/g, 'europe')\n  tz = tz.replace(/\\islands/g, 'island')\n  return tz\n}\n\n// try our best to reconcile the timzone to this given string\nconst lookupTz = (str, zones) => {\n  if (!str) {\n    // guard if Intl response is unsupported (#397)\n    if (!zones.hasOwnProperty(local)) {\n      console.warn(`Unrecognized IANA id '${local}'. Setting fallback tz to UTC.`)\n      local = 'utc'\n    }\n    return local\n  }\n  if (typeof str !== 'string') {\n    console.error(\"Timezone must be a string - recieved: '\", str, \"'\\n\")\n  }\n  let tz = str.trim()\n  // let split = str.split('/')\n  //support long timezones like 'America/Argentina/Rio_Gallegos'\n  // if (split.length > 2 && zones.hasOwnProperty(tz) === false) {\n  //   tz = split[0] + '/' + split[1]\n  // }\n  tz = tz.toLowerCase()\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //lookup more loosely..\n  tz = normalize(tz)\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //try city-names\n  if (cities.hasOwnProperty(tz) === true) {\n    return cities[tz]\n  }\n  // //try to parse '-5h'\n  if (/[0-9]/.test(tz) === true) {\n    let id = parseOffset(tz)\n    if (id) {\n      return id\n    }\n  }\n\n  throw new Error(\n    \"Spacetime: Cannot find timezone named: '\" + str + \"'. Please enter an IANA timezone id.\"\n  )\n}\nexport default lookupTz\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,0BAA0B;AAC1C,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,WAAW,MAAM,kBAAkB;AAE1C,IAAIC,KAAK,GAAGF,OAAO,CAAC,CAAC;;AAErB;AACA,MAAMG,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACN,GAAG,CAAC,CAACO,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC/C,IAAIC,IAAI,GAAGD,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;EAChCD,IAAI,GAAGA,IAAI,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9BJ,CAAC,CAACE,IAAI,CAAC,GAAGD,CAAC;EACX,OAAOD,CAAC;AACV,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEN;AACA,MAAMK,SAAS,GAAIC,EAAE,IAAK;EACxBA,EAAE,GAAGA,EAAE,CAACF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAC7BE,EAAE,GAAGA,EAAE,CAACF,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC;EACnDE,EAAE,GAAGA,EAAE,CAACF,OAAO,CAAC,+BAA+B,EAAE,IAAI,CAAC;EACtDE,EAAE,GAAGA,EAAE,CAACF,OAAO,CAAC,gCAAgC,EAAE,IAAI,CAAC;EACvDE,EAAE,GAAGA,EAAE,CAACF,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC;EACxCE,EAAE,GAAGA,EAAE,CAACF,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC;EACtC,OAAOE,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;EAC/B,IAAI,CAACD,GAAG,EAAE;IACR;IACA,IAAI,CAACC,KAAK,CAACC,cAAc,CAACf,KAAK,CAAC,EAAE;MAChCgB,OAAO,CAACC,IAAI,CAAE,yBAAwBjB,KAAM,gCAA+B,CAAC;MAC5EA,KAAK,GAAG,KAAK;IACf;IACA,OAAOA,KAAK;EACd;EACA,IAAI,OAAOa,GAAG,KAAK,QAAQ,EAAE;IAC3BG,OAAO,CAACE,KAAK,CAAC,yCAAyC,EAAEL,GAAG,EAAE,KAAK,CAAC;EACtE;EACA,IAAIF,EAAE,GAAGE,GAAG,CAACM,IAAI,CAAC,CAAC;EACnB;EACA;EACA;EACA;EACA;EACAR,EAAE,GAAGA,EAAE,CAACS,WAAW,CAAC,CAAC;EACrB,IAAIN,KAAK,CAACC,cAAc,CAACJ,EAAE,CAAC,KAAK,IAAI,EAAE;IACrC,OAAOA,EAAE;EACX;EACA;EACAA,EAAE,GAAGD,SAAS,CAACC,EAAE,CAAC;EAClB,IAAIG,KAAK,CAACC,cAAc,CAACJ,EAAE,CAAC,KAAK,IAAI,EAAE;IACrC,OAAOA,EAAE;EACX;EACA;EACA,IAAIV,MAAM,CAACc,cAAc,CAACJ,EAAE,CAAC,KAAK,IAAI,EAAE;IACtC,OAAOV,MAAM,CAACU,EAAE,CAAC;EACnB;EACA;EACA,IAAI,OAAO,CAACU,IAAI,CAACV,EAAE,CAAC,KAAK,IAAI,EAAE;IAC7B,IAAIW,EAAE,GAAGvB,WAAW,CAACY,EAAE,CAAC;IACxB,IAAIW,EAAE,EAAE;MACN,OAAOA,EAAE;IACX;EACF;EAEA,MAAM,IAAIC,KAAK,CACb,0CAA0C,GAAGV,GAAG,GAAG,sCACrD,CAAC;AACH,CAAC;AACD,eAAeD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}