{"ast":null,"code":"import monthLength from '../../data/monthLengths.js';\nimport { isLeapYear } from '../../fns.js';\nconst getMonthLength = function (month, year) {\n  if (month === 1 && isLeapYear(year)) {\n    return 29;\n  }\n  return monthLength[month];\n};\n\n//month is the one thing we 'model/compute'\n//- because ms-shifting can be off by enough\nconst rollMonth = (want, old) => {\n  //increment year\n  if (want.month > 0) {\n    let years = parseInt(want.month / 12, 10);\n    want.year = old.year() + years;\n    want.month = want.month % 12;\n  } else if (want.month < 0) {\n    let m = Math.abs(want.month);\n    let years = parseInt(m / 12, 10);\n    if (m % 12 !== 0) {\n      years += 1;\n    }\n    want.year = old.year() - years;\n    //ignore extras\n    want.month = want.month % 12;\n    want.month = want.month + 12;\n    if (want.month === 12) {\n      want.month = 0;\n    }\n  }\n  return want;\n};\n\n// briefly support day=-2 (this does not need to be perfect.)\nconst rollDaysDown = (want, old, sum) => {\n  want.year = old.year();\n  want.month = old.month();\n  let date = old.date();\n  want.date = date - Math.abs(sum);\n  while (want.date < 1) {\n    want.month -= 1;\n    if (want.month < 0) {\n      want.month = 11;\n      want.year -= 1;\n    }\n    let max = getMonthLength(want.month, want.year);\n    want.date += max;\n  }\n  return want;\n};\n\n// briefly support day=33 (this does not need to be perfect.)\nconst rollDaysUp = (want, old, sum) => {\n  let year = old.year();\n  let month = old.month();\n  let max = getMonthLength(month, year);\n  while (sum > max) {\n    sum -= max;\n    month += 1;\n    if (month >= 12) {\n      month -= 12;\n      year += 1;\n    }\n    max = getMonthLength(month, year);\n  }\n  want.month = month;\n  want.date = sum;\n  return want;\n};\nexport const months = rollMonth;\nexport const days = rollDaysUp;\nexport const daysBack = rollDaysDown;","map":{"version":3,"names":["monthLength","isLeapYear","getMonthLength","month","year","rollMonth","want","old","years","parseInt","m","Math","abs","rollDaysDown","sum","date","max","rollDaysUp","months","days","daysBack"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/node_modules/spacetime/src/methods/set/_model.js"],"sourcesContent":["import monthLength from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst getMonthLength = function (month, year) {\n  if (month === 1 && isLeapYear(year)) {\n    return 29\n  }\n  return monthLength[month]\n}\n\n//month is the one thing we 'model/compute'\n//- because ms-shifting can be off by enough\nconst rollMonth = (want, old) => {\n  //increment year\n  if (want.month > 0) {\n    let years = parseInt(want.month / 12, 10)\n    want.year = old.year() + years\n    want.month = want.month % 12\n  } else if (want.month < 0) {\n    let m = Math.abs(want.month)\n    let years = parseInt(m / 12, 10)\n    if (m % 12 !== 0) {\n      years += 1\n    }\n    want.year = old.year() - years\n    //ignore extras\n    want.month = want.month % 12\n    want.month = want.month + 12\n    if (want.month === 12) {\n      want.month = 0\n    }\n  }\n  return want\n}\n\n// briefly support day=-2 (this does not need to be perfect.)\nconst rollDaysDown = (want, old, sum) => {\n  want.year = old.year()\n  want.month = old.month()\n  let date = old.date()\n  want.date = date - Math.abs(sum)\n  while (want.date < 1) {\n    want.month -= 1\n    if (want.month < 0) {\n      want.month = 11\n      want.year -= 1\n    }\n    let max = getMonthLength(want.month, want.year)\n    want.date += max\n  }\n  return want\n}\n\n// briefly support day=33 (this does not need to be perfect.)\nconst rollDaysUp = (want, old, sum) => {\n  let year = old.year()\n  let month = old.month()\n  let max = getMonthLength(month, year)\n  while (sum > max) {\n    sum -= max\n    month += 1\n    if (month >= 12) {\n      month -= 12\n      year += 1\n    }\n    max = getMonthLength(month, year)\n  }\n  want.month = month\n  want.date = sum\n  return want\n}\n\nexport const months = rollMonth\nexport const days = rollDaysUp\nexport const daysBack = rollDaysDown\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}