{"ast":null,"code":"import walkTo from './set/walk.js';\nimport ms from '../data/milliseconds.js';\nimport monthLength from '../data/monthLengths.js';\nimport { months, daysBack, days } from './set/_model.js';\nimport { normalize } from '../fns.js';\n// this logic is a bit of a mess,\n// but briefly:\n// millisecond-math, and some post-processing covers most-things\n// we 'model' the calendar here only a little bit\n// and that usually works-out...\n\nconst order = ['millisecond', 'second', 'minute', 'hour', 'date', 'month'];\nlet keep = {\n  second: order.slice(0, 1),\n  minute: order.slice(0, 2),\n  quarterhour: order.slice(0, 2),\n  hour: order.slice(0, 3),\n  date: order.slice(0, 4),\n  month: order.slice(0, 4),\n  quarter: order.slice(0, 4),\n  season: order.slice(0, 4),\n  year: order,\n  decade: order,\n  century: order\n};\nkeep.week = keep.hour;\nkeep.season = keep.date;\nkeep.quarter = keep.date;\n\n// Units need to be dst adjuested\nconst dstAwareUnits = {\n  year: true,\n  quarter: true,\n  season: true,\n  month: true,\n  week: true,\n  date: true\n};\nconst keepDate = {\n  month: true,\n  quarter: true,\n  season: true,\n  year: true\n};\nconst addMethods = SpaceTime => {\n  SpaceTime.prototype.add = function (num, unit) {\n    let s = this.clone();\n    if (!unit || num === 0) {\n      return s; //don't bother\n    }\n\n    let old = this.clone();\n    unit = normalize(unit);\n    if (unit === 'millisecond') {\n      s.epoch += num;\n      return s;\n    }\n    // support 'fortnight' alias\n    if (unit === 'fortnight') {\n      num *= 2;\n      unit = 'week';\n    }\n    //move forward by the estimated milliseconds (rough)\n    if (ms[unit]) {\n      s.epoch += ms[unit] * num;\n    } else if (unit === 'week' || unit === 'weekend') {\n      s.epoch += ms.day * (num * 7);\n    } else if (unit === 'quarter' || unit === 'season') {\n      s.epoch += ms.month * (num * 3);\n    } else if (unit === 'quarterhour') {\n      s.epoch += ms.minute * 15 * num;\n    }\n    //now ensure our milliseconds/etc are in-line\n    let want = {};\n    if (keep[unit]) {\n      keep[unit].forEach(u => {\n        want[u] = old[u]();\n      });\n    }\n    if (dstAwareUnits[unit]) {\n      const diff = old.timezone().current.offset - s.timezone().current.offset;\n      s.epoch += diff * 3600 * 1000;\n    }\n\n    //ensure month/year has ticked-over\n    if (unit === 'month') {\n      want.month = old.month() + num;\n      //month is the one unit we 'model' directly\n      want = months(want, old);\n    }\n    //support coercing a week, too\n    if (unit === 'week') {\n      let sum = old.date() + num * 7;\n      if (sum <= 28 && sum > 1) {\n        want.date = sum;\n      }\n    }\n    if (unit === 'weekend' && s.dayName() !== 'saturday') {\n      s = s.day('saturday', true); //ensure it's saturday\n    }\n    //support 25-hour day-changes on dst-changes\n    else if (unit === 'date') {\n      if (num < 0) {\n        want = daysBack(want, old, num);\n      } else {\n        //specify a naive date number, if it's easy to do...\n        let sum = old.date() + num;\n        // ok, model this one too\n        want = days(want, old, sum);\n      }\n      //manually punt it if we haven't moved at all..\n      if (num !== 0 && old.isSame(s, 'day')) {\n        want.date = old.date() + num;\n      }\n    }\n    // ensure a quarter is 3 months over\n    else if (unit === 'quarter') {\n      want.month = old.month() + num * 3;\n      want.year = old.year();\n      // handle rollover\n      if (want.month < 0) {\n        let years = Math.floor(want.month / 12);\n        let remainder = want.month + Math.abs(years) * 12;\n        want.month = remainder;\n        want.year += years;\n      } else if (want.month >= 12) {\n        let years = Math.floor(want.month / 12);\n        want.month = want.month % 12;\n        want.year += years;\n      }\n      want.date = old.date();\n    }\n    //ensure year has changed (leap-years)\n    else if (unit === 'year') {\n      let wantYear = old.year() + num;\n      let haveYear = s.year();\n      if (haveYear < wantYear) {\n        let toAdd = Math.floor(num / 4) || 1; //approx num of leap-days\n        s.epoch += Math.abs(ms.day * toAdd);\n      } else if (haveYear > wantYear) {\n        let toAdd = Math.floor(num / 4) || 1; //approx num of leap-days\n        s.epoch += ms.day * toAdd;\n      }\n    }\n    //these are easier\n    else if (unit === 'decade') {\n      want.year = s.year() + 10;\n    } else if (unit === 'century') {\n      want.year = s.year() + 100;\n    }\n    //keep current date, unless the month doesn't have it.\n    if (keepDate[unit]) {\n      let max = monthLength[want.month];\n      want.date = old.date();\n      if (want.date > max) {\n        want.date = max;\n      }\n    }\n    if (Object.keys(want).length > 1) {\n      walkTo(s, want);\n    }\n    return s;\n  };\n\n  //subtract is only add *-1\n  SpaceTime.prototype.subtract = function (num, unit) {\n    let s = this.clone();\n    return s.add(num * -1, unit);\n  };\n  //add aliases\n  SpaceTime.prototype.minus = SpaceTime.prototype.subtract;\n  SpaceTime.prototype.plus = SpaceTime.prototype.add;\n};\nexport default addMethods;","map":{"version":3,"names":["walkTo","ms","monthLength","months","daysBack","days","normalize","order","keep","second","slice","minute","quarterhour","hour","date","month","quarter","season","year","decade","century","week","dstAwareUnits","keepDate","addMethods","SpaceTime","prototype","add","num","unit","s","clone","old","epoch","day","want","forEach","u","diff","timezone","current","offset","sum","dayName","isSame","years","Math","floor","remainder","abs","wantYear","haveYear","toAdd","max","Object","keys","length","subtract","minus","plus"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/methods/add.js"],"sourcesContent":["import walkTo from './set/walk.js'\nimport ms from '../data/milliseconds.js'\nimport monthLength from '../data/monthLengths.js'\nimport { months, daysBack, days } from './set/_model.js'\nimport { normalize } from '../fns.js'\n// this logic is a bit of a mess,\n// but briefly:\n// millisecond-math, and some post-processing covers most-things\n// we 'model' the calendar here only a little bit\n// and that usually works-out...\n\nconst order = ['millisecond', 'second', 'minute', 'hour', 'date', 'month']\nlet keep = {\n  second: order.slice(0, 1),\n  minute: order.slice(0, 2),\n  quarterhour: order.slice(0, 2),\n  hour: order.slice(0, 3),\n  date: order.slice(0, 4),\n  month: order.slice(0, 4),\n  quarter: order.slice(0, 4),\n  season: order.slice(0, 4),\n  year: order,\n  decade: order,\n  century: order\n}\nkeep.week = keep.hour\nkeep.season = keep.date\nkeep.quarter = keep.date\n\n// Units need to be dst adjuested\nconst dstAwareUnits = {\n  year: true,\n  quarter: true,\n  season: true,\n  month: true,\n  week: true,\n  date: true\n}\n\nconst keepDate = {\n  month: true,\n  quarter: true,\n  season: true,\n  year: true\n}\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.add = function (num, unit) {\n    let s = this.clone()\n\n    if (!unit || num === 0) {\n      return s //don't bother\n    }\n    let old = this.clone()\n    unit = normalize(unit)\n    if (unit === 'millisecond') {\n      s.epoch += num\n      return s\n    }\n    // support 'fortnight' alias\n    if (unit === 'fortnight') {\n      num *= 2\n      unit = 'week'\n    }\n    //move forward by the estimated milliseconds (rough)\n    if (ms[unit]) {\n      s.epoch += ms[unit] * num\n    } else if (unit === 'week' || unit === 'weekend') {\n      s.epoch += ms.day * (num * 7)\n    } else if (unit === 'quarter' || unit === 'season') {\n      s.epoch += ms.month * (num * 3)\n    } else if (unit === 'quarterhour') {\n      s.epoch += ms.minute * 15 * num\n    }\n    //now ensure our milliseconds/etc are in-line\n    let want = {}\n    if (keep[unit]) {\n      keep[unit].forEach((u) => {\n        want[u] = old[u]()\n      })\n    }\n\n    if (dstAwareUnits[unit]) {\n      const diff = old.timezone().current.offset - s.timezone().current.offset\n      s.epoch += diff * 3600 * 1000\n    }\n\n    //ensure month/year has ticked-over\n    if (unit === 'month') {\n      want.month = old.month() + num\n      //month is the one unit we 'model' directly\n      want = months(want, old)\n    }\n    //support coercing a week, too\n    if (unit === 'week') {\n      let sum = old.date() + num * 7\n      if (sum <= 28 && sum > 1) {\n        want.date = sum\n      }\n    }\n    if (unit === 'weekend' && s.dayName() !== 'saturday') {\n      s = s.day('saturday', true) //ensure it's saturday\n    }\n    //support 25-hour day-changes on dst-changes\n    else if (unit === 'date') {\n      if (num < 0) {\n        want = daysBack(want, old, num)\n      } else {\n        //specify a naive date number, if it's easy to do...\n        let sum = old.date() + num\n        // ok, model this one too\n        want = days(want, old, sum)\n      }\n      //manually punt it if we haven't moved at all..\n      if (num !== 0 && old.isSame(s, 'day')) {\n        want.date = old.date() + num\n      }\n    }\n    // ensure a quarter is 3 months over\n    else if (unit === 'quarter') {\n      want.month = old.month() + num * 3\n      want.year = old.year()\n      // handle rollover\n      if (want.month < 0) {\n        let years = Math.floor(want.month / 12)\n        let remainder = want.month + Math.abs(years) * 12\n        want.month = remainder\n        want.year += years\n      } else if (want.month >= 12) {\n        let years = Math.floor(want.month / 12)\n        want.month = want.month % 12\n        want.year += years\n      }\n      want.date = old.date()\n    }\n    //ensure year has changed (leap-years)\n    else if (unit === 'year') {\n      let wantYear = old.year() + num\n      let haveYear = s.year()\n      if (haveYear < wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += Math.abs(ms.day * toAdd)\n      } else if (haveYear > wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += ms.day * toAdd\n      }\n    }\n    //these are easier\n    else if (unit === 'decade') {\n      want.year = s.year() + 10\n    } else if (unit === 'century') {\n      want.year = s.year() + 100\n    }\n    //keep current date, unless the month doesn't have it.\n    if (keepDate[unit]) {\n      let max = monthLength[want.month]\n      want.date = old.date()\n      if (want.date > max) {\n        want.date = max\n      }\n    }\n    if (Object.keys(want).length > 1) {\n      walkTo(s, want)\n    }\n    return s\n  }\n\n  //subtract is only add *-1\n  SpaceTime.prototype.subtract = function (num, unit) {\n    let s = this.clone()\n    return s.add(num * -1, unit)\n  }\n  //add aliases\n  SpaceTime.prototype.minus = SpaceTime.prototype.subtract\n  SpaceTime.prototype.plus = SpaceTime.prototype.add\n}\n\nexport default addMethods\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}