{"ast":null,"code":"import walkTo from '../../methods/set/walk.js';\nimport { toCardinal } from '../../fns.js';\nimport { validate, parseTime, parseYear, parseMonth, parseOffset } from './_parsers.js';\nexport default [\n// =====\n//  y-m-d\n// =====\n//iso-this 1998-05-30T22:00:00:000Z, iso-that 2017-04-03T08:00:00-0700\n{\n  reg: /^(\\-?0?0?[0-9]{3,4})-([0-9]{1,2})-([0-9]{1,2})[T| ]([0-9.:]+)(Z|[0-9\\-\\+:]+)?$/i,\n  parse: (s, m) => {\n    let obj = {\n      year: m[1],\n      month: parseInt(m[2], 10) - 1,\n      date: m[3]\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    parseOffset(s, m[5]);\n    walkTo(s, obj);\n    s = parseTime(s, m[4]);\n    return s;\n  }\n},\n//short-iso \"2015-03-25\" or \"2015/03/25\" or \"2015/03/25 12:26:14 PM\"\n{\n  reg: /^([0-9]{4})[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n  parse: (s, m) => {\n    let obj = {\n      year: m[1],\n      month: parseInt(m[2], 10) - 1,\n      date: parseInt(m[3], 10)\n    };\n    if (obj.month >= 12) {\n      //support yyyy/dd/mm (weird, but ok)\n      obj.date = parseInt(m[2], 10);\n      obj.month = parseInt(m[3], 10) - 1;\n    }\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s, m[4]);\n    return s;\n  }\n},\n//text-month \"2015-feb-25\"\n{\n  reg: /^([0-9]{4})[\\-\\/\\. ]([a-z]+)[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n  parse: (s, m) => {\n    let obj = {\n      year: parseYear(m[1], s._today),\n      month: parseMonth(m[2]),\n      date: toCardinal(m[3] || '')\n    };\n    if (validate(obj) === false) {\n      s.epoch = null;\n      return s;\n    }\n    walkTo(s, obj);\n    s = parseTime(s, m[4]);\n    return s;\n  }\n}];","map":{"version":3,"names":["walkTo","toCardinal","validate","parseTime","parseYear","parseMonth","parseOffset","reg","parse","s","m","obj","year","month","parseInt","date","epoch","_today"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/node_modules/spacetime/src/input/formats/01-ymd.js"],"sourcesContent":["import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth, parseOffset } from './_parsers.js'\n\nexport default [\n  // =====\n  //  y-m-d\n  // =====\n  //iso-this 1998-05-30T22:00:00:000Z, iso-that 2017-04-03T08:00:00-0700\n  {\n    reg: /^(\\-?0?0?[0-9]{3,4})-([0-9]{1,2})-([0-9]{1,2})[T| ]([0-9.:]+)(Z|[0-9\\-\\+:]+)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: m[3]\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      parseOffset(s, m[5])\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  //short-iso \"2015-03-25\" or \"2015/03/25\" or \"2015/03/25 12:26:14 PM\"\n  {\n    reg: /^([0-9]{4})[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: parseInt(m[3], 10)\n      }\n      if (obj.month >= 12) {\n        //support yyyy/dd/mm (weird, but ok)\n        obj.date = parseInt(m[2], 10)\n        obj.month = parseInt(m[3], 10) - 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //text-month \"2015-feb-25\"\n  {\n    reg: /^([0-9]{4})[\\-\\/\\. ]([a-z]+)[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[1], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[3] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  }\n]\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,2BAA2B;AAC9C,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,QAAQ,EAAEC,SAAS,EAAEC,SAAS,EAAEC,UAAU,EAAEC,WAAW,QAAQ,eAAe;AAEvF,eAAe;AACb;AACA;AACA;AACA;AACA;EACEC,GAAG,EAAE,iFAAiF;EACtFC,KAAK,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAK;IACf,IAAIC,GAAG,GAAG;MACRC,IAAI,EAAEF,CAAC,CAAC,CAAC,CAAC;MACVG,KAAK,EAAEC,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;MAC7BK,IAAI,EAAEL,CAAC,CAAC,CAAC;IACX,CAAC;IACD,IAAIR,QAAQ,CAACS,GAAG,CAAC,KAAK,KAAK,EAAE;MAC3BF,CAAC,CAACO,KAAK,GAAG,IAAI;MACd,OAAOP,CAAC;IACV;IACAH,WAAW,CAACG,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpBV,MAAM,CAACS,CAAC,EAAEE,GAAG,CAAC;IACdF,CAAC,GAAGN,SAAS,CAACM,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,OAAOD,CAAC;EACV;AACF,CAAC;AACD;AACA;EACEF,GAAG,EAAE,6GAA6G;EAClHC,KAAK,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAK;IACf,IAAIC,GAAG,GAAG;MACRC,IAAI,EAAEF,CAAC,CAAC,CAAC,CAAC;MACVG,KAAK,EAAEC,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;MAC7BK,IAAI,EAAED,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;IACzB,CAAC;IACD,IAAIC,GAAG,CAACE,KAAK,IAAI,EAAE,EAAE;MACnB;MACAF,GAAG,CAACI,IAAI,GAAGD,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;MAC7BC,GAAG,CAACE,KAAK,GAAGC,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;IACpC;IACA,IAAIR,QAAQ,CAACS,GAAG,CAAC,KAAK,KAAK,EAAE;MAC3BF,CAAC,CAACO,KAAK,GAAG,IAAI;MACd,OAAOP,CAAC;IACV;IACAT,MAAM,CAACS,CAAC,EAAEE,GAAG,CAAC;IACdF,CAAC,GAAGN,SAAS,CAACM,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,OAAOD,CAAC;EACV;AACF,CAAC;AAED;AACA;EACEF,GAAG,EAAE,yGAAyG;EAC9GC,KAAK,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAK;IACf,IAAIC,GAAG,GAAG;MACRC,IAAI,EAAER,SAAS,CAACM,CAAC,CAAC,CAAC,CAAC,EAAED,CAAC,CAACQ,MAAM,CAAC;MAC/BJ,KAAK,EAAER,UAAU,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC;MACvBK,IAAI,EAAEd,UAAU,CAACS,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;IAC7B,CAAC;IACD,IAAIR,QAAQ,CAACS,GAAG,CAAC,KAAK,KAAK,EAAE;MAC3BF,CAAC,CAACO,KAAK,GAAG,IAAI;MACd,OAAOP,CAAC;IACV;IACAT,MAAM,CAACS,CAAC,EAAEE,GAAG,CAAC;IACdF,CAAC,GAAGN,SAAS,CAACM,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,OAAOD,CAAC;EACV;AACF,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}