{"ast":null,"code":"const defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n};\n\n//support [2016, 03, 01] format\nconst parseArray = (s, arr, today) => {\n  if (arr.length === 0) {\n    return s;\n  }\n  let order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond'];\n  for (let i = 0; i < order.length; i++) {\n    let num = arr[i] || today[order[i]] || defaults[order[i]] || 0;\n    s = s[order[i]](num);\n  }\n  return s;\n};\n\n//support {year:2016, month:3} format\nconst parseObject = (s, obj, today) => {\n  // if obj is empty, do nothing\n  if (Object.keys(obj).length === 0) {\n    return s;\n  }\n  obj = Object.assign({}, defaults, today, obj);\n  let keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    let unit = keys[i];\n    //make sure we have this method\n    if (s[unit] === undefined || typeof s[unit] !== 'function') {\n      continue;\n    }\n    //make sure the value is a number\n    if (obj[unit] === null || obj[unit] === undefined || obj[unit] === '') {\n      continue;\n    }\n    let num = obj[unit] || today[unit] || defaults[unit] || 0;\n    s = s[unit](num);\n  }\n  return s;\n};\n\n// this may seem like an arbitrary number, but it's 'within jan 1970'\n// this is only really ambiguous until 2054 or so\nconst parseNumber = function (s, input) {\n  const minimumEpoch = 2500000000;\n  // if the given epoch is really small, they've probably given seconds and not milliseconds\n  // anything below this number is likely (but not necessarily) a mistaken input.\n  if (input > 0 && input < minimumEpoch && s.silent === false) {\n    console.warn('  - Warning: You are setting the date to January 1970.');\n    console.warn('       -   did input seconds instead of milliseconds?');\n  }\n  s.epoch = input;\n  return s;\n};\nexport default {\n  parseArray,\n  parseObject,\n  parseNumber\n};","map":{"version":3,"names":["defaults","year","Date","getFullYear","month","date","parseArray","s","arr","today","length","order","i","num","parseObject","obj","Object","keys","assign","unit","undefined","parseNumber","input","minimumEpoch","silent","console","warn","epoch"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/input/helpers.js"],"sourcesContent":["const defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//support [2016, 03, 01] format\nconst parseArray = (s, arr, today) => {\n  if (arr.length === 0) {\n    return s\n  }\n  let order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n  for (let i = 0; i < order.length; i++) {\n    let num = arr[i] || today[order[i]] || defaults[order[i]] || 0\n    s = s[order[i]](num)\n  }\n  return s\n}\n\n//support {year:2016, month:3} format\nconst parseObject = (s, obj, today) => {\n  // if obj is empty, do nothing\n  if (Object.keys(obj).length === 0) {\n    return s\n  }\n  obj = Object.assign({}, defaults, today, obj)\n  let keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    let unit = keys[i]\n    //make sure we have this method\n    if (s[unit] === undefined || typeof s[unit] !== 'function') {\n      continue\n    }\n    //make sure the value is a number\n    if (obj[unit] === null || obj[unit] === undefined || obj[unit] === '') {\n      continue\n    }\n    let num = obj[unit] || today[unit] || defaults[unit] || 0\n    s = s[unit](num)\n  }\n  return s\n}\n\n// this may seem like an arbitrary number, but it's 'within jan 1970'\n// this is only really ambiguous until 2054 or so\nconst parseNumber = function (s, input) {\n  const minimumEpoch = 2500000000\n  // if the given epoch is really small, they've probably given seconds and not milliseconds\n  // anything below this number is likely (but not necessarily) a mistaken input.\n  if (input > 0 && input < minimumEpoch && s.silent === false) {\n    console.warn('  - Warning: You are setting the date to January 1970.')\n    console.warn('       -   did input seconds instead of milliseconds?')\n  }\n  s.epoch = input\n  return s\n}\n\nexport default {\n  parseArray,\n  parseObject,\n  parseNumber\n}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG;EACfC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC9BC,KAAK,EAAE,CAAC;EACRC,IAAI,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,UAAU,GAAGA,CAACC,CAAC,EAAEC,GAAG,EAAEC,KAAK,KAAK;EACpC,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOH,CAAC;EACV;EACA,IAAII,KAAK,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,CAAC;EAChF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACD,MAAM,EAAEE,CAAC,EAAE,EAAE;IACrC,IAAIC,GAAG,GAAGL,GAAG,CAACI,CAAC,CAAC,IAAIH,KAAK,CAACE,KAAK,CAACC,CAAC,CAAC,CAAC,IAAIZ,QAAQ,CAACW,KAAK,CAACC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9DL,CAAC,GAAGA,CAAC,CAACI,KAAK,CAACC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC;EACtB;EACA,OAAON,CAAC;AACV,CAAC;;AAED;AACA,MAAMO,WAAW,GAAGA,CAACP,CAAC,EAAEQ,GAAG,EAAEN,KAAK,KAAK;EACrC;EACA,IAAIO,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACL,MAAM,KAAK,CAAC,EAAE;IACjC,OAAOH,CAAC;EACV;EACAQ,GAAG,GAAGC,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAElB,QAAQ,EAAES,KAAK,EAAEM,GAAG,CAAC;EAC7C,IAAIE,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC;EAC3B,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,IAAI,CAACP,MAAM,EAAEE,CAAC,EAAE,EAAE;IACpC,IAAIO,IAAI,GAAGF,IAAI,CAACL,CAAC,CAAC;IAClB;IACA,IAAIL,CAAC,CAACY,IAAI,CAAC,KAAKC,SAAS,IAAI,OAAOb,CAAC,CAACY,IAAI,CAAC,KAAK,UAAU,EAAE;MAC1D;IACF;IACA;IACA,IAAIJ,GAAG,CAACI,IAAI,CAAC,KAAK,IAAI,IAAIJ,GAAG,CAACI,IAAI,CAAC,KAAKC,SAAS,IAAIL,GAAG,CAACI,IAAI,CAAC,KAAK,EAAE,EAAE;MACrE;IACF;IACA,IAAIN,GAAG,GAAGE,GAAG,CAACI,IAAI,CAAC,IAAIV,KAAK,CAACU,IAAI,CAAC,IAAInB,QAAQ,CAACmB,IAAI,CAAC,IAAI,CAAC;IACzDZ,CAAC,GAAGA,CAAC,CAACY,IAAI,CAAC,CAACN,GAAG,CAAC;EAClB;EACA,OAAON,CAAC;AACV,CAAC;;AAED;AACA;AACA,MAAMc,WAAW,GAAG,SAAAA,CAAUd,CAAC,EAAEe,KAAK,EAAE;EACtC,MAAMC,YAAY,GAAG,UAAU;EAC/B;EACA;EACA,IAAID,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGC,YAAY,IAAIhB,CAAC,CAACiB,MAAM,KAAK,KAAK,EAAE;IAC3DC,OAAO,CAACC,IAAI,CAAC,wDAAwD,CAAC;IACtED,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;EACvE;EACAnB,CAAC,CAACoB,KAAK,GAAGL,KAAK;EACf,OAAOf,CAAC;AACV,CAAC;AAED,eAAe;EACbD,UAAU;EACVQ,WAAW;EACXO;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}