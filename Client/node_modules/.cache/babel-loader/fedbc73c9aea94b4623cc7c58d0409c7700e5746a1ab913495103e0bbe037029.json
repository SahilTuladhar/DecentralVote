{"ast":null,"code":"// truncate any sub-millisecond values\nconst parseMs = function (str = '') {\n  str = String(str);\n  //js does not support sub-millisecond values \n  // so truncate these - 2021-11-02T19:55:30.087772\n  if (str.length > 3) {\n    str = str.substr(0, 3);\n  } else if (str.length === 1) {\n    // assume ms are zero-padded on the left\n    // but maybe not on the right.\n    // turn '.10' into '.100'\n    str = str + '00';\n  } else if (str.length === 2) {\n    str = str + '0';\n  }\n  return Number(str) || 0;\n};\nconst parseTime = (s, str = '') => {\n  // remove all whitespace\n  str = str.replace(/^\\s+/, '').toLowerCase();\n  //formal time format - 04:30.23\n  let arr = str.match(/([0-9]{1,2}):([0-9]{1,2}):?([0-9]{1,2})?[:\\.]?([0-9]{1,4})?/);\n  if (arr !== null) {\n    //validate it a little\n    let h = Number(arr[1]);\n    if (h < 0 || h > 24) {\n      return s.startOf('day');\n    }\n    let m = Number(arr[2]); //don't accept '5:3pm'\n    if (arr[2].length < 2 || m < 0 || m > 59) {\n      return s.startOf('day');\n    }\n    s = s.hour(h);\n    s = s.minute(m);\n    s = s.seconds(arr[3] || 0);\n    s = s.millisecond(parseMs(arr[4]));\n    //parse-out am/pm\n    let ampm = str.match(/[\\b0-9] ?(am|pm)\\b/);\n    if (ampm !== null && ampm[1]) {\n      s = s.ampm(ampm[1]);\n    }\n    return s;\n  }\n\n  //try an informal form - 5pm (no minutes)\n  arr = str.match(/([0-9]+) ?(am|pm)/);\n  if (arr !== null && arr[1]) {\n    let h = Number(arr[1]);\n    //validate it a little..\n    if (h > 12 || h < 1) {\n      return s.startOf('day');\n    }\n    s = s.hour(arr[1] || 0);\n    s = s.ampm(arr[2]);\n    s = s.startOf('hour');\n    return s;\n  }\n\n  //no time info found, use start-of-day\n  s = s.startOf('day');\n  return s;\n};\nexport default parseTime;","map":{"version":3,"names":["parseMs","str","String","length","substr","Number","parseTime","s","replace","toLowerCase","arr","match","h","startOf","m","hour","minute","seconds","millisecond","ampm"],"sources":["/Users/lasagna/DecentralVote/DecentralVote/Client/node_modules/spacetime/src/input/formats/parseTime.js"],"sourcesContent":["// truncate any sub-millisecond values\nconst parseMs = function (str = '') {\n  str = String(str)\n  //js does not support sub-millisecond values \n  // so truncate these - 2021-11-02T19:55:30.087772\n  if (str.length > 3) {\n    str = str.substr(0, 3)\n  } else if (str.length === 1) {\n    // assume ms are zero-padded on the left\n    // but maybe not on the right.\n    // turn '.10' into '.100'\n    str = str + '00'\n  } else if (str.length === 2) {\n    str = str + '0'\n  }\n  return Number(str) || 0\n}\n\nconst parseTime = (s, str = '') => {\n  // remove all whitespace\n  str = str.replace(/^\\s+/, '').toLowerCase()\n  //formal time format - 04:30.23\n  let arr = str.match(/([0-9]{1,2}):([0-9]{1,2}):?([0-9]{1,2})?[:\\.]?([0-9]{1,4})?/)\n  if (arr !== null) {\n    //validate it a little\n    let h = Number(arr[1])\n    if (h < 0 || h > 24) {\n      return s.startOf('day')\n    }\n    let m = Number(arr[2]) //don't accept '5:3pm'\n    if (arr[2].length < 2 || m < 0 || m > 59) {\n      return s.startOf('day')\n    }\n    s = s.hour(h)\n    s = s.minute(m)\n    s = s.seconds(arr[3] || 0)\n    s = s.millisecond(parseMs(arr[4]))\n    //parse-out am/pm\n    let ampm = str.match(/[\\b0-9] ?(am|pm)\\b/)\n    if (ampm !== null && ampm[1]) {\n      s = s.ampm(ampm[1])\n    }\n    return s\n  }\n\n  //try an informal form - 5pm (no minutes)\n  arr = str.match(/([0-9]+) ?(am|pm)/)\n  if (arr !== null && arr[1]) {\n    let h = Number(arr[1])\n    //validate it a little..\n    if (h > 12 || h < 1) {\n      return s.startOf('day')\n    }\n    s = s.hour(arr[1] || 0)\n    s = s.ampm(arr[2])\n    s = s.startOf('hour')\n    return s\n  }\n\n  //no time info found, use start-of-day\n  s = s.startOf('day')\n  return s\n}\nexport default parseTime\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}